
STM32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a8c  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000c34  08000c3c  00010c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000c34  08000c34  00010c3c  2**0
                  CONTENTS
  4 .ARM          00000000  08000c34  08000c34  00010c3c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c34  08000c3c  00010c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c34  08000c34  00010c34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c38  08000c38  00010c38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010c3c  2**0
                  CONTENTS
 10 .bss          00000030  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000030  20000030  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010c3c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010c6c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000013c5  00000000  00000000  00010caf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000051c  00000000  00000000  00012074  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000140  00000000  00000000  00012590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000000db  00000000  00000000  000126d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000120e  00000000  00000000  000127ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000ba1  00000000  00000000  000139b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00004f48  00000000  00000000  0001455a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000003a8  00000000  00000000  000194a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  0001984c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000c1c 	.word	0x08000c1c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000c1c 	.word	0x08000c1c

080001e8 <NVIC_Set_Pending>:
	SET_BIT((NVIC->NVIC_ICER[((uint32_t)irq)>>5UL]),(((uint32_t)irq) & 31UL));

	}
}

void NVIC_Set_Pending(nvic_irq_t irq){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	if((uint32_t)irq>=0){
	SET_BIT((NVIC->NVIC_ISPR[((uint32_t)irq)>>5UL]),(((uint32_t)irq) & 31UL));
 80001f2:	4a0e      	ldr	r2, [pc, #56]	; (800022c <NVIC_Set_Pending+0x44>)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	095b      	lsrs	r3, r3, #5
 80001fa:	3340      	adds	r3, #64	; 0x40
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	f003 031f 	and.w	r3, r3, #31
 8000206:	2101      	movs	r1, #1
 8000208:	fa01 f303 	lsl.w	r3, r1, r3
 800020c:	4618      	mov	r0, r3
 800020e:	4907      	ldr	r1, [pc, #28]	; (800022c <NVIC_Set_Pending+0x44>)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	4302      	orrs	r2, r0
 8000218:	3340      	adds	r3, #64	; 0x40
 800021a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	e000e100 	.word	0xe000e100

08000230 <NVIC_Get_Active>:
	SET_BIT((NVIC->NVIC_ICPR[((uint32_t)irq)>>5UL]),(((uint32_t)irq) & 31UL));

	}
}

uint8_t NVIC_Get_Active(nvic_irq_t irq){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]

	return READ_BIT((NVIC->NVIC_IABR[((uint32_t)irq)>>5UL]),(((uint32_t)irq) & 31UL));;
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <NVIC_Get_Active+0x38>)
 800023c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000240:	095b      	lsrs	r3, r3, #5
 8000242:	3380      	adds	r3, #128	; 0x80
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	f003 031f 	and.w	r3, r3, #31
 800024e:	fa22 f303 	lsr.w	r3, r2, r3
 8000252:	b2db      	uxtb	r3, r3
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
}
 800025a:	4618      	mov	r0, r3
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	e000e100 	.word	0xe000e100

0800026c <NVIC_Get_Priority>:

void NVIC_Set_Priority(nvic_irq_t irq,uint8_t priority){
NVIC->NVIC_IPR[irq]=priority<<4;

}
uint8_t NVIC_Get_Priority( nvic_irq_t irq){
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]

return (NVIC->NVIC_IPR[irq]>>4);
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <NVIC_Get_Priority+0x28>)
 8000278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027c:	4413      	add	r3, r2
 800027e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000282:	b2db      	uxtb	r3, r3
 8000284:	091b      	lsrs	r3, r3, #4
 8000286:	b2db      	uxtb	r3, r3
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	e000e100 	.word	0xe000e100

08000298 <SysTick_Int>:

static volatile void (*SysTick_FN_Ptr)(void)=NULL;

static volatile uint8_t systick_mode=SYSTICK_SINGLE_INTERVAL_MODE;

void SysTick_Int(systick_int *ptr){
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	6078      	str	r0, [r7, #4]
if(NULL!=ptr){
 80002a0:	687b      	ldr	r3, [r7, #4]
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d034      	beq.n	8000310 <SysTick_Int+0x78>

	// disable systick timer
	SYSTICK_DISABLE();
 80002a6:	4b1d      	ldr	r3, [pc, #116]	; (800031c <SysTick_Int+0x84>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	4a1c      	ldr	r2, [pc, #112]	; (800031c <SysTick_Int+0x84>)
 80002ac:	f023 0301 	bic.w	r3, r3, #1
 80002b0:	6013      	str	r3, [r2, #0]

	// set reload register
	WRITE_REG(SYSTICK->STK_LOAD,ptr->systick_relaodReg_value);
 80002b2:	4a1a      	ldr	r2, [pc, #104]	; (800031c <SysTick_Int+0x84>)
 80002b4:	687b      	ldr	r3, [r7, #4]
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	6053      	str	r3, [r2, #4]

	// reset value register
	WRITE_REG(SYSTICK->STK_VAL,0);
 80002ba:	4b18      	ldr	r3, [pc, #96]	; (800031c <SysTick_Int+0x84>)
 80002bc:	2200      	movs	r2, #0
 80002be:	609a      	str	r2, [r3, #8]

	//select clock
	if(SYSTICK_CLOCK_DIV_1==ptr->systick_clock_sourse){
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	791b      	ldrb	r3, [r3, #4]
 80002c4:	f003 0301 	and.w	r3, r3, #1
 80002c8:	b2db      	uxtb	r3, r3
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d106      	bne.n	80002dc <SysTick_Int+0x44>
		SYSTICK_CLOCK_DIV_BY_1();
 80002ce:	4b13      	ldr	r3, [pc, #76]	; (800031c <SysTick_Int+0x84>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4a12      	ldr	r2, [pc, #72]	; (800031c <SysTick_Int+0x84>)
 80002d4:	f043 0304 	orr.w	r3, r3, #4
 80002d8:	6013      	str	r3, [r2, #0]
 80002da:	e005      	b.n	80002e8 <SysTick_Int+0x50>
	}
	else{
		SYSTICK_CLOCK_DIV_BY_8();
 80002dc:	4b0f      	ldr	r3, [pc, #60]	; (800031c <SysTick_Int+0x84>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a0e      	ldr	r2, [pc, #56]	; (800031c <SysTick_Int+0x84>)
 80002e2:	f023 0304 	bic.w	r3, r3, #4
 80002e6:	6013      	str	r3, [r2, #0]
	}

	// set interrupt
	if(SYSTICK_INTERRUPT_DISABLE==ptr->systick_interrupt){
 80002e8:	687b      	ldr	r3, [r7, #4]
 80002ea:	791b      	ldrb	r3, [r3, #4]
 80002ec:	f003 0302 	and.w	r3, r3, #2
 80002f0:	b2db      	uxtb	r3, r3
 80002f2:	2b00      	cmp	r3, #0
 80002f4:	d006      	beq.n	8000304 <SysTick_Int+0x6c>
		SYSTICK_DISABLE_INT();
 80002f6:	4b09      	ldr	r3, [pc, #36]	; (800031c <SysTick_Int+0x84>)
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	4a08      	ldr	r2, [pc, #32]	; (800031c <SysTick_Int+0x84>)
 80002fc:	f023 0302 	bic.w	r3, r3, #2
 8000300:	6013      	str	r3, [r2, #0]
			SYSTICK_ENABLE_INT();
		}

}

}
 8000302:	e005      	b.n	8000310 <SysTick_Int+0x78>
			SYSTICK_ENABLE_INT();
 8000304:	4b05      	ldr	r3, [pc, #20]	; (800031c <SysTick_Int+0x84>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	4a04      	ldr	r2, [pc, #16]	; (800031c <SysTick_Int+0x84>)
 800030a:	f043 0302 	orr.w	r3, r3, #2
 800030e:	6013      	str	r3, [r2, #0]
}
 8000310:	bf00      	nop
 8000312:	370c      	adds	r7, #12
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	e000e010 	.word	0xe000e010

08000320 <SysTick_PeriodicInterval>:
	}


}

void SysTick_PeriodicInterval(void (*Ptr)(void),uint32_t value){
 8000320:	b480      	push	{r7}
 8000322:	b083      	sub	sp, #12
 8000324:	af00      	add	r7, sp, #0
 8000326:	6078      	str	r0, [r7, #4]
 8000328:	6039      	str	r1, [r7, #0]
	if(NULL!=Ptr){
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	2b00      	cmp	r3, #0
 800032e:	d014      	beq.n	800035a <SysTick_PeriodicInterval+0x3a>
			SYSTICK->STK_LOAD=value;
 8000330:	4a0d      	ldr	r2, [pc, #52]	; (8000368 <SysTick_PeriodicInterval+0x48>)
 8000332:	683b      	ldr	r3, [r7, #0]
 8000334:	6053      	str	r3, [r2, #4]
			SysTick_FN_Ptr=Ptr;
 8000336:	4a0d      	ldr	r2, [pc, #52]	; (800036c <SysTick_PeriodicInterval+0x4c>)
 8000338:	687b      	ldr	r3, [r7, #4]
 800033a:	6013      	str	r3, [r2, #0]
			systick_mode=SYSTICK_PERIODIC_INTERVAL_MODE;
 800033c:	4b0c      	ldr	r3, [pc, #48]	; (8000370 <SysTick_PeriodicInterval+0x50>)
 800033e:	2201      	movs	r2, #1
 8000340:	701a      	strb	r2, [r3, #0]
			SYSTICK_ENABLE_INT();
 8000342:	4b09      	ldr	r3, [pc, #36]	; (8000368 <SysTick_PeriodicInterval+0x48>)
 8000344:	681b      	ldr	r3, [r3, #0]
 8000346:	4a08      	ldr	r2, [pc, #32]	; (8000368 <SysTick_PeriodicInterval+0x48>)
 8000348:	f043 0302 	orr.w	r3, r3, #2
 800034c:	6013      	str	r3, [r2, #0]
			SYSTICK_ENABLE();
 800034e:	4b06      	ldr	r3, [pc, #24]	; (8000368 <SysTick_PeriodicInterval+0x48>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a05      	ldr	r2, [pc, #20]	; (8000368 <SysTick_PeriodicInterval+0x48>)
 8000354:	f043 0301 	orr.w	r3, r3, #1
 8000358:	6013      	str	r3, [r2, #0]
		}
}
 800035a:	bf00      	nop
 800035c:	370c      	adds	r7, #12
 800035e:	46bd      	mov	sp, r7
 8000360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000364:	4770      	bx	lr
 8000366:	bf00      	nop
 8000368:	e000e010 	.word	0xe000e010
 800036c:	2000001c 	.word	0x2000001c
 8000370:	20000020 	.word	0x20000020

08000374 <SysTick_GetRemainingTicks>:

uint32_t SysTick_GetRemainingTicks(void){
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0
return (SYSTICK->STK_VAL);
 8000378:	4b03      	ldr	r3, [pc, #12]	; (8000388 <SysTick_GetRemainingTicks+0x14>)
 800037a:	689b      	ldr	r3, [r3, #8]
}
 800037c:	4618      	mov	r0, r3
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
 8000386:	bf00      	nop
 8000388:	e000e010 	.word	0xe000e010

0800038c <SysTick_Handler>:


/* systick handler */
void SysTick_Handler(void){
 800038c:	b580      	push	{r7, lr}
 800038e:	af00      	add	r7, sp, #0
	if(SYSTICK_SINGLE_INTERVAL_MODE==systick_mode){
 8000390:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <SysTick_Handler+0x54>)
 8000392:	781b      	ldrb	r3, [r3, #0]
 8000394:	b2db      	uxtb	r3, r3
 8000396:	2b00      	cmp	r3, #0
 8000398:	d113      	bne.n	80003c2 <SysTick_Handler+0x36>
		SYSTICK_DISABLE_INT();
 800039a:	4b12      	ldr	r3, [pc, #72]	; (80003e4 <SysTick_Handler+0x58>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	4a11      	ldr	r2, [pc, #68]	; (80003e4 <SysTick_Handler+0x58>)
 80003a0:	f023 0302 	bic.w	r3, r3, #2
 80003a4:	6013      	str	r3, [r2, #0]
		if(SysTick_FN_Ptr){
 80003a6:	4b10      	ldr	r3, [pc, #64]	; (80003e8 <SysTick_Handler+0x5c>)
 80003a8:	681b      	ldr	r3, [r3, #0]
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d016      	beq.n	80003dc <SysTick_Handler+0x50>
				SYSTICK_CLEAR_FLAG();
 80003ae:	4b0d      	ldr	r3, [pc, #52]	; (80003e4 <SysTick_Handler+0x58>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	4a0c      	ldr	r2, [pc, #48]	; (80003e4 <SysTick_Handler+0x58>)
 80003b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003b8:	6013      	str	r3, [r2, #0]
				SysTick_FN_Ptr();
 80003ba:	4b0b      	ldr	r3, [pc, #44]	; (80003e8 <SysTick_Handler+0x5c>)
 80003bc:	681b      	ldr	r3, [r3, #0]
 80003be:	4798      	blx	r3
				SYSTICK_CLEAR_FLAG();
				SysTick_FN_Ptr();
			}
	}

}
 80003c0:	e00c      	b.n	80003dc <SysTick_Handler+0x50>
		if(SysTick_FN_Ptr){
 80003c2:	4b09      	ldr	r3, [pc, #36]	; (80003e8 <SysTick_Handler+0x5c>)
 80003c4:	681b      	ldr	r3, [r3, #0]
 80003c6:	2b00      	cmp	r3, #0
 80003c8:	d008      	beq.n	80003dc <SysTick_Handler+0x50>
				SYSTICK_CLEAR_FLAG();
 80003ca:	4b06      	ldr	r3, [pc, #24]	; (80003e4 <SysTick_Handler+0x58>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a05      	ldr	r2, [pc, #20]	; (80003e4 <SysTick_Handler+0x58>)
 80003d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80003d4:	6013      	str	r3, [r2, #0]
				SysTick_FN_Ptr();
 80003d6:	4b04      	ldr	r3, [pc, #16]	; (80003e8 <SysTick_Handler+0x5c>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4798      	blx	r3
}
 80003dc:	bf00      	nop
 80003de:	bd80      	pop	{r7, pc}
 80003e0:	20000020 	.word	0x20000020
 80003e4:	e000e010 	.word	0xe000e010
 80003e8:	2000001c 	.word	0x2000001c

080003ec <RCC_Enable>:

#include <MCAL/RCC/STM32F407_RCC.h>



void RCC_Enable(rcc_register_name_t reg_name,uint8_t sup_reg_name){
 80003ec:	b480      	push	{r7}
 80003ee:	b083      	sub	sp, #12
 80003f0:	af00      	add	r7, sp, #0
 80003f2:	4603      	mov	r3, r0
 80003f4:	460a      	mov	r2, r1
 80003f6:	71fb      	strb	r3, [r7, #7]
 80003f8:	4613      	mov	r3, r2
 80003fa:	71bb      	strb	r3, [r7, #6]
	switch(reg_name){
 80003fc:	79fb      	ldrb	r3, [r7, #7]
 80003fe:	2b16      	cmp	r3, #22
 8000400:	f200 8133 	bhi.w	800066a <RCC_Enable+0x27e>
 8000404:	a201      	add	r2, pc, #4	; (adr r2, 800040c <RCC_Enable+0x20>)
 8000406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800040a:	bf00      	nop
 800040c:	08000469 	.word	0x08000469
 8000410:	0800047f 	.word	0x0800047f
 8000414:	08000495 	.word	0x08000495
 8000418:	080004ab 	.word	0x080004ab
 800041c:	080004c1 	.word	0x080004c1
 8000420:	080004d7 	.word	0x080004d7
 8000424:	080004ed 	.word	0x080004ed
 8000428:	08000503 	.word	0x08000503
 800042c:	08000519 	.word	0x08000519
 8000430:	0800052f 	.word	0x0800052f
 8000434:	08000545 	.word	0x08000545
 8000438:	0800055b 	.word	0x0800055b
 800043c:	08000571 	.word	0x08000571
 8000440:	08000587 	.word	0x08000587
 8000444:	0800059d 	.word	0x0800059d
 8000448:	080005b3 	.word	0x080005b3
 800044c:	080005c9 	.word	0x080005c9
 8000450:	080005df 	.word	0x080005df
 8000454:	080005f5 	.word	0x080005f5
 8000458:	0800060b 	.word	0x0800060b
 800045c:	08000621 	.word	0x08000621
 8000460:	08000637 	.word	0x08000637
 8000464:	08000651 	.word	0x08000651
	case RCC_CR:
		SET_BIT(RCC->RCC_CR,sup_reg_name);
 8000468:	4b83      	ldr	r3, [pc, #524]	; (8000678 <RCC_Enable+0x28c>)
 800046a:	681b      	ldr	r3, [r3, #0]
 800046c:	79ba      	ldrb	r2, [r7, #6]
 800046e:	2101      	movs	r1, #1
 8000470:	fa01 f202 	lsl.w	r2, r1, r2
 8000474:	4611      	mov	r1, r2
 8000476:	4a80      	ldr	r2, [pc, #512]	; (8000678 <RCC_Enable+0x28c>)
 8000478:	430b      	orrs	r3, r1
 800047a:	6013      	str	r3, [r2, #0]
		break;
 800047c:	e0f6      	b.n	800066c <RCC_Enable+0x280>
	case RCC_PLLCFGR:
		SET_BIT(RCC->RCC_PLLCFGR,sup_reg_name);
 800047e:	4b7e      	ldr	r3, [pc, #504]	; (8000678 <RCC_Enable+0x28c>)
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	79ba      	ldrb	r2, [r7, #6]
 8000484:	2101      	movs	r1, #1
 8000486:	fa01 f202 	lsl.w	r2, r1, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a7a      	ldr	r2, [pc, #488]	; (8000678 <RCC_Enable+0x28c>)
 800048e:	430b      	orrs	r3, r1
 8000490:	6053      	str	r3, [r2, #4]
			break;
 8000492:	e0eb      	b.n	800066c <RCC_Enable+0x280>
	case RCC_CFGR:
		SET_BIT(RCC->RCC_CFGR,sup_reg_name);
 8000494:	4b78      	ldr	r3, [pc, #480]	; (8000678 <RCC_Enable+0x28c>)
 8000496:	689b      	ldr	r3, [r3, #8]
 8000498:	79ba      	ldrb	r2, [r7, #6]
 800049a:	2101      	movs	r1, #1
 800049c:	fa01 f202 	lsl.w	r2, r1, r2
 80004a0:	4611      	mov	r1, r2
 80004a2:	4a75      	ldr	r2, [pc, #468]	; (8000678 <RCC_Enable+0x28c>)
 80004a4:	430b      	orrs	r3, r1
 80004a6:	6093      	str	r3, [r2, #8]
			break;
 80004a8:	e0e0      	b.n	800066c <RCC_Enable+0x280>
	case RCC_CIR:
		SET_BIT(RCC->RCC_CIR,sup_reg_name);
 80004aa:	4b73      	ldr	r3, [pc, #460]	; (8000678 <RCC_Enable+0x28c>)
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	79ba      	ldrb	r2, [r7, #6]
 80004b0:	2101      	movs	r1, #1
 80004b2:	fa01 f202 	lsl.w	r2, r1, r2
 80004b6:	4611      	mov	r1, r2
 80004b8:	4a6f      	ldr	r2, [pc, #444]	; (8000678 <RCC_Enable+0x28c>)
 80004ba:	430b      	orrs	r3, r1
 80004bc:	60d3      	str	r3, [r2, #12]
			break;
 80004be:	e0d5      	b.n	800066c <RCC_Enable+0x280>
	case RCC_AHB1RSTR:
		SET_BIT(RCC->RCC_AHB1RSTR,sup_reg_name);
 80004c0:	4b6d      	ldr	r3, [pc, #436]	; (8000678 <RCC_Enable+0x28c>)
 80004c2:	691b      	ldr	r3, [r3, #16]
 80004c4:	79ba      	ldrb	r2, [r7, #6]
 80004c6:	2101      	movs	r1, #1
 80004c8:	fa01 f202 	lsl.w	r2, r1, r2
 80004cc:	4611      	mov	r1, r2
 80004ce:	4a6a      	ldr	r2, [pc, #424]	; (8000678 <RCC_Enable+0x28c>)
 80004d0:	430b      	orrs	r3, r1
 80004d2:	6113      	str	r3, [r2, #16]
			break;
 80004d4:	e0ca      	b.n	800066c <RCC_Enable+0x280>
	case RCC_AHB2RSTR:
		SET_BIT(RCC->RCC_AHB2RSTR,sup_reg_name);
 80004d6:	4b68      	ldr	r3, [pc, #416]	; (8000678 <RCC_Enable+0x28c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	79ba      	ldrb	r2, [r7, #6]
 80004dc:	2101      	movs	r1, #1
 80004de:	fa01 f202 	lsl.w	r2, r1, r2
 80004e2:	4611      	mov	r1, r2
 80004e4:	4a64      	ldr	r2, [pc, #400]	; (8000678 <RCC_Enable+0x28c>)
 80004e6:	430b      	orrs	r3, r1
 80004e8:	6153      	str	r3, [r2, #20]
			break;
 80004ea:	e0bf      	b.n	800066c <RCC_Enable+0x280>
	case RCC_AHB3RSTR:
		SET_BIT(RCC->RCC_AHB3RSTR,sup_reg_name);
 80004ec:	4b62      	ldr	r3, [pc, #392]	; (8000678 <RCC_Enable+0x28c>)
 80004ee:	699b      	ldr	r3, [r3, #24]
 80004f0:	79ba      	ldrb	r2, [r7, #6]
 80004f2:	2101      	movs	r1, #1
 80004f4:	fa01 f202 	lsl.w	r2, r1, r2
 80004f8:	4611      	mov	r1, r2
 80004fa:	4a5f      	ldr	r2, [pc, #380]	; (8000678 <RCC_Enable+0x28c>)
 80004fc:	430b      	orrs	r3, r1
 80004fe:	6193      	str	r3, [r2, #24]
			break;
 8000500:	e0b4      	b.n	800066c <RCC_Enable+0x280>
	case RCC_APB1RSTR:
		SET_BIT(RCC->RCC_APB1RSTR,sup_reg_name);
 8000502:	4b5d      	ldr	r3, [pc, #372]	; (8000678 <RCC_Enable+0x28c>)
 8000504:	6a1b      	ldr	r3, [r3, #32]
 8000506:	79ba      	ldrb	r2, [r7, #6]
 8000508:	2101      	movs	r1, #1
 800050a:	fa01 f202 	lsl.w	r2, r1, r2
 800050e:	4611      	mov	r1, r2
 8000510:	4a59      	ldr	r2, [pc, #356]	; (8000678 <RCC_Enable+0x28c>)
 8000512:	430b      	orrs	r3, r1
 8000514:	6213      	str	r3, [r2, #32]
			break;
 8000516:	e0a9      	b.n	800066c <RCC_Enable+0x280>
	case RCC_APB2RSTR:
		SET_BIT(RCC->RCC_APB2RSTR,sup_reg_name);
 8000518:	4b57      	ldr	r3, [pc, #348]	; (8000678 <RCC_Enable+0x28c>)
 800051a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800051c:	79ba      	ldrb	r2, [r7, #6]
 800051e:	2101      	movs	r1, #1
 8000520:	fa01 f202 	lsl.w	r2, r1, r2
 8000524:	4611      	mov	r1, r2
 8000526:	4a54      	ldr	r2, [pc, #336]	; (8000678 <RCC_Enable+0x28c>)
 8000528:	430b      	orrs	r3, r1
 800052a:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 800052c:	e09e      	b.n	800066c <RCC_Enable+0x280>
	case RCC_AHB1ENR:
		SET_BIT(RCC->RCC_AHB1ENR,sup_reg_name);
 800052e:	4b52      	ldr	r3, [pc, #328]	; (8000678 <RCC_Enable+0x28c>)
 8000530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000532:	79ba      	ldrb	r2, [r7, #6]
 8000534:	2101      	movs	r1, #1
 8000536:	fa01 f202 	lsl.w	r2, r1, r2
 800053a:	4611      	mov	r1, r2
 800053c:	4a4e      	ldr	r2, [pc, #312]	; (8000678 <RCC_Enable+0x28c>)
 800053e:	430b      	orrs	r3, r1
 8000540:	6313      	str	r3, [r2, #48]	; 0x30
			break;
 8000542:	e093      	b.n	800066c <RCC_Enable+0x280>
	case RCC_AHB2ENR:
		SET_BIT(RCC->RCC_AHB2ENR,sup_reg_name);
 8000544:	4b4c      	ldr	r3, [pc, #304]	; (8000678 <RCC_Enable+0x28c>)
 8000546:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000548:	79ba      	ldrb	r2, [r7, #6]
 800054a:	2101      	movs	r1, #1
 800054c:	fa01 f202 	lsl.w	r2, r1, r2
 8000550:	4611      	mov	r1, r2
 8000552:	4a49      	ldr	r2, [pc, #292]	; (8000678 <RCC_Enable+0x28c>)
 8000554:	430b      	orrs	r3, r1
 8000556:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000558:	e088      	b.n	800066c <RCC_Enable+0x280>
	case RCC_AHB3ENR:
		SET_BIT(RCC->RCC_AHB3ENR,sup_reg_name);
 800055a:	4b47      	ldr	r3, [pc, #284]	; (8000678 <RCC_Enable+0x28c>)
 800055c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800055e:	79ba      	ldrb	r2, [r7, #6]
 8000560:	2101      	movs	r1, #1
 8000562:	fa01 f202 	lsl.w	r2, r1, r2
 8000566:	4611      	mov	r1, r2
 8000568:	4a43      	ldr	r2, [pc, #268]	; (8000678 <RCC_Enable+0x28c>)
 800056a:	430b      	orrs	r3, r1
 800056c:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800056e:	e07d      	b.n	800066c <RCC_Enable+0x280>
	case RCC_APB1ENR:
		SET_BIT(RCC->RCC_APB1ENR,sup_reg_name);
 8000570:	4b41      	ldr	r3, [pc, #260]	; (8000678 <RCC_Enable+0x28c>)
 8000572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000574:	79ba      	ldrb	r2, [r7, #6]
 8000576:	2101      	movs	r1, #1
 8000578:	fa01 f202 	lsl.w	r2, r1, r2
 800057c:	4611      	mov	r1, r2
 800057e:	4a3e      	ldr	r2, [pc, #248]	; (8000678 <RCC_Enable+0x28c>)
 8000580:	430b      	orrs	r3, r1
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000584:	e072      	b.n	800066c <RCC_Enable+0x280>
	case RCC_APB2ENR:
		SET_BIT(RCC->RCC_APB2ENR,sup_reg_name);
 8000586:	4b3c      	ldr	r3, [pc, #240]	; (8000678 <RCC_Enable+0x28c>)
 8000588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800058a:	79ba      	ldrb	r2, [r7, #6]
 800058c:	2101      	movs	r1, #1
 800058e:	fa01 f202 	lsl.w	r2, r1, r2
 8000592:	4611      	mov	r1, r2
 8000594:	4a38      	ldr	r2, [pc, #224]	; (8000678 <RCC_Enable+0x28c>)
 8000596:	430b      	orrs	r3, r1
 8000598:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 800059a:	e067      	b.n	800066c <RCC_Enable+0x280>
	case RCC_AHB1LPENR:
		SET_BIT(RCC->RCC_AHB1LPENR,sup_reg_name);
 800059c:	4b36      	ldr	r3, [pc, #216]	; (8000678 <RCC_Enable+0x28c>)
 800059e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80005a0:	79ba      	ldrb	r2, [r7, #6]
 80005a2:	2101      	movs	r1, #1
 80005a4:	fa01 f202 	lsl.w	r2, r1, r2
 80005a8:	4611      	mov	r1, r2
 80005aa:	4a33      	ldr	r2, [pc, #204]	; (8000678 <RCC_Enable+0x28c>)
 80005ac:	430b      	orrs	r3, r1
 80005ae:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 80005b0:	e05c      	b.n	800066c <RCC_Enable+0x280>
	case RCC_AHB2LPENR:
		SET_BIT(RCC->RCC_AHB2LPENR,sup_reg_name);
 80005b2:	4b31      	ldr	r3, [pc, #196]	; (8000678 <RCC_Enable+0x28c>)
 80005b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80005b6:	79ba      	ldrb	r2, [r7, #6]
 80005b8:	2101      	movs	r1, #1
 80005ba:	fa01 f202 	lsl.w	r2, r1, r2
 80005be:	4611      	mov	r1, r2
 80005c0:	4a2d      	ldr	r2, [pc, #180]	; (8000678 <RCC_Enable+0x28c>)
 80005c2:	430b      	orrs	r3, r1
 80005c4:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 80005c6:	e051      	b.n	800066c <RCC_Enable+0x280>
	case RCC_AHB3LPENR:
		SET_BIT(RCC->RCC_AHB3LPENR,sup_reg_name);
 80005c8:	4b2b      	ldr	r3, [pc, #172]	; (8000678 <RCC_Enable+0x28c>)
 80005ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80005cc:	79ba      	ldrb	r2, [r7, #6]
 80005ce:	2101      	movs	r1, #1
 80005d0:	fa01 f202 	lsl.w	r2, r1, r2
 80005d4:	4611      	mov	r1, r2
 80005d6:	4a28      	ldr	r2, [pc, #160]	; (8000678 <RCC_Enable+0x28c>)
 80005d8:	430b      	orrs	r3, r1
 80005da:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 80005dc:	e046      	b.n	800066c <RCC_Enable+0x280>
	case RCC_APB1LPENR:
		SET_BIT(RCC->RCC_APB1LPENR,sup_reg_name);
 80005de:	4b26      	ldr	r3, [pc, #152]	; (8000678 <RCC_Enable+0x28c>)
 80005e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80005e2:	79ba      	ldrb	r2, [r7, #6]
 80005e4:	2101      	movs	r1, #1
 80005e6:	fa01 f202 	lsl.w	r2, r1, r2
 80005ea:	4611      	mov	r1, r2
 80005ec:	4a22      	ldr	r2, [pc, #136]	; (8000678 <RCC_Enable+0x28c>)
 80005ee:	430b      	orrs	r3, r1
 80005f0:	6613      	str	r3, [r2, #96]	; 0x60
			break;
 80005f2:	e03b      	b.n	800066c <RCC_Enable+0x280>
	case RCC_APB2LPENR:
		SET_BIT(RCC->RCC_APB2LPENR,sup_reg_name);
 80005f4:	4b20      	ldr	r3, [pc, #128]	; (8000678 <RCC_Enable+0x28c>)
 80005f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80005f8:	79ba      	ldrb	r2, [r7, #6]
 80005fa:	2101      	movs	r1, #1
 80005fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000600:	4611      	mov	r1, r2
 8000602:	4a1d      	ldr	r2, [pc, #116]	; (8000678 <RCC_Enable+0x28c>)
 8000604:	430b      	orrs	r3, r1
 8000606:	6653      	str	r3, [r2, #100]	; 0x64
			break;
 8000608:	e030      	b.n	800066c <RCC_Enable+0x280>
	case RCC_BDCR:
		SET_BIT(RCC->RCC_BDCR,sup_reg_name);
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <RCC_Enable+0x28c>)
 800060c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800060e:	79ba      	ldrb	r2, [r7, #6]
 8000610:	2101      	movs	r1, #1
 8000612:	fa01 f202 	lsl.w	r2, r1, r2
 8000616:	4611      	mov	r1, r2
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <RCC_Enable+0x28c>)
 800061a:	430b      	orrs	r3, r1
 800061c:	6713      	str	r3, [r2, #112]	; 0x70
			break;
 800061e:	e025      	b.n	800066c <RCC_Enable+0x280>
	case RCC_CSR:
		SET_BIT(RCC->RCC_CSR,sup_reg_name);
 8000620:	4b15      	ldr	r3, [pc, #84]	; (8000678 <RCC_Enable+0x28c>)
 8000622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000624:	79ba      	ldrb	r2, [r7, #6]
 8000626:	2101      	movs	r1, #1
 8000628:	fa01 f202 	lsl.w	r2, r1, r2
 800062c:	4611      	mov	r1, r2
 800062e:	4a12      	ldr	r2, [pc, #72]	; (8000678 <RCC_Enable+0x28c>)
 8000630:	430b      	orrs	r3, r1
 8000632:	6753      	str	r3, [r2, #116]	; 0x74
			break;
 8000634:	e01a      	b.n	800066c <RCC_Enable+0x280>
	case RCC_SSCGR:
		SET_BIT(RCC->RCC_SSCGR,sup_reg_name);
 8000636:	4b10      	ldr	r3, [pc, #64]	; (8000678 <RCC_Enable+0x28c>)
 8000638:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800063c:	79ba      	ldrb	r2, [r7, #6]
 800063e:	2101      	movs	r1, #1
 8000640:	fa01 f202 	lsl.w	r2, r1, r2
 8000644:	4611      	mov	r1, r2
 8000646:	4a0c      	ldr	r2, [pc, #48]	; (8000678 <RCC_Enable+0x28c>)
 8000648:	430b      	orrs	r3, r1
 800064a:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			break;
 800064e:	e00d      	b.n	800066c <RCC_Enable+0x280>
	case RCC_PLLI2SCFGR:
		SET_BIT(RCC->RCC_PLLI2SCFGR,sup_reg_name);
 8000650:	4b09      	ldr	r3, [pc, #36]	; (8000678 <RCC_Enable+0x28c>)
 8000652:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000656:	79ba      	ldrb	r2, [r7, #6]
 8000658:	2101      	movs	r1, #1
 800065a:	fa01 f202 	lsl.w	r2, r1, r2
 800065e:	4611      	mov	r1, r2
 8000660:	4a05      	ldr	r2, [pc, #20]	; (8000678 <RCC_Enable+0x28c>)
 8000662:	430b      	orrs	r3, r1
 8000664:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
			break;
 8000668:	e000      	b.n	800066c <RCC_Enable+0x280>
	default :
		//nothing
		break;
 800066a:	bf00      	nop

	}


}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	40023800 	.word	0x40023800

0800067c <RCC_Disable>:

void RCC_Disable(rcc_register_name_t reg_name,uint8_t sup_reg_name){
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	460a      	mov	r2, r1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	4613      	mov	r3, r2
 800068a:	71bb      	strb	r3, [r7, #6]
	switch(reg_name){
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b16      	cmp	r3, #22
 8000690:	f200 814a 	bhi.w	8000928 <RCC_Disable+0x2ac>
 8000694:	a201      	add	r2, pc, #4	; (adr r2, 800069c <RCC_Disable+0x20>)
 8000696:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800069a:	bf00      	nop
 800069c:	080006f9 	.word	0x080006f9
 80006a0:	08000711 	.word	0x08000711
 80006a4:	08000729 	.word	0x08000729
 80006a8:	08000741 	.word	0x08000741
 80006ac:	08000759 	.word	0x08000759
 80006b0:	08000771 	.word	0x08000771
 80006b4:	08000789 	.word	0x08000789
 80006b8:	080007a1 	.word	0x080007a1
 80006bc:	080007b9 	.word	0x080007b9
 80006c0:	080007d1 	.word	0x080007d1
 80006c4:	080007e9 	.word	0x080007e9
 80006c8:	08000801 	.word	0x08000801
 80006cc:	08000819 	.word	0x08000819
 80006d0:	08000831 	.word	0x08000831
 80006d4:	08000849 	.word	0x08000849
 80006d8:	08000861 	.word	0x08000861
 80006dc:	08000879 	.word	0x08000879
 80006e0:	08000891 	.word	0x08000891
 80006e4:	080008a9 	.word	0x080008a9
 80006e8:	080008c1 	.word	0x080008c1
 80006ec:	080008d9 	.word	0x080008d9
 80006f0:	080008f1 	.word	0x080008f1
 80006f4:	0800090d 	.word	0x0800090d
		case RCC_CR:
			CLEAR_BIT(RCC->RCC_CR,sup_reg_name);
 80006f8:	4b8f      	ldr	r3, [pc, #572]	; (8000938 <RCC_Disable+0x2bc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	79ba      	ldrb	r2, [r7, #6]
 80006fe:	2101      	movs	r1, #1
 8000700:	fa01 f202 	lsl.w	r2, r1, r2
 8000704:	43d2      	mvns	r2, r2
 8000706:	4611      	mov	r1, r2
 8000708:	4a8b      	ldr	r2, [pc, #556]	; (8000938 <RCC_Disable+0x2bc>)
 800070a:	400b      	ands	r3, r1
 800070c:	6013      	str	r3, [r2, #0]
			break;
 800070e:	e10c      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_PLLCFGR:
			CLEAR_BIT(RCC->RCC_PLLCFGR,sup_reg_name);
 8000710:	4b89      	ldr	r3, [pc, #548]	; (8000938 <RCC_Disable+0x2bc>)
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	79ba      	ldrb	r2, [r7, #6]
 8000716:	2101      	movs	r1, #1
 8000718:	fa01 f202 	lsl.w	r2, r1, r2
 800071c:	43d2      	mvns	r2, r2
 800071e:	4611      	mov	r1, r2
 8000720:	4a85      	ldr	r2, [pc, #532]	; (8000938 <RCC_Disable+0x2bc>)
 8000722:	400b      	ands	r3, r1
 8000724:	6053      	str	r3, [r2, #4]
				break;
 8000726:	e100      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_CFGR:
			CLEAR_BIT(RCC->RCC_CFGR,sup_reg_name);
 8000728:	4b83      	ldr	r3, [pc, #524]	; (8000938 <RCC_Disable+0x2bc>)
 800072a:	689b      	ldr	r3, [r3, #8]
 800072c:	79ba      	ldrb	r2, [r7, #6]
 800072e:	2101      	movs	r1, #1
 8000730:	fa01 f202 	lsl.w	r2, r1, r2
 8000734:	43d2      	mvns	r2, r2
 8000736:	4611      	mov	r1, r2
 8000738:	4a7f      	ldr	r2, [pc, #508]	; (8000938 <RCC_Disable+0x2bc>)
 800073a:	400b      	ands	r3, r1
 800073c:	6093      	str	r3, [r2, #8]
				break;
 800073e:	e0f4      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_CIR:
			CLEAR_BIT(RCC->RCC_CIR,sup_reg_name);
 8000740:	4b7d      	ldr	r3, [pc, #500]	; (8000938 <RCC_Disable+0x2bc>)
 8000742:	68db      	ldr	r3, [r3, #12]
 8000744:	79ba      	ldrb	r2, [r7, #6]
 8000746:	2101      	movs	r1, #1
 8000748:	fa01 f202 	lsl.w	r2, r1, r2
 800074c:	43d2      	mvns	r2, r2
 800074e:	4611      	mov	r1, r2
 8000750:	4a79      	ldr	r2, [pc, #484]	; (8000938 <RCC_Disable+0x2bc>)
 8000752:	400b      	ands	r3, r1
 8000754:	60d3      	str	r3, [r2, #12]
				break;
 8000756:	e0e8      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_AHB1RSTR:
			CLEAR_BIT(RCC->RCC_AHB1RSTR,sup_reg_name);
 8000758:	4b77      	ldr	r3, [pc, #476]	; (8000938 <RCC_Disable+0x2bc>)
 800075a:	691b      	ldr	r3, [r3, #16]
 800075c:	79ba      	ldrb	r2, [r7, #6]
 800075e:	2101      	movs	r1, #1
 8000760:	fa01 f202 	lsl.w	r2, r1, r2
 8000764:	43d2      	mvns	r2, r2
 8000766:	4611      	mov	r1, r2
 8000768:	4a73      	ldr	r2, [pc, #460]	; (8000938 <RCC_Disable+0x2bc>)
 800076a:	400b      	ands	r3, r1
 800076c:	6113      	str	r3, [r2, #16]
				break;
 800076e:	e0dc      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_AHB2RSTR:
			CLEAR_BIT(RCC->RCC_AHB2RSTR,sup_reg_name);
 8000770:	4b71      	ldr	r3, [pc, #452]	; (8000938 <RCC_Disable+0x2bc>)
 8000772:	695b      	ldr	r3, [r3, #20]
 8000774:	79ba      	ldrb	r2, [r7, #6]
 8000776:	2101      	movs	r1, #1
 8000778:	fa01 f202 	lsl.w	r2, r1, r2
 800077c:	43d2      	mvns	r2, r2
 800077e:	4611      	mov	r1, r2
 8000780:	4a6d      	ldr	r2, [pc, #436]	; (8000938 <RCC_Disable+0x2bc>)
 8000782:	400b      	ands	r3, r1
 8000784:	6153      	str	r3, [r2, #20]
				break;
 8000786:	e0d0      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_AHB3RSTR:
			CLEAR_BIT(RCC->RCC_AHB3RSTR,sup_reg_name);
 8000788:	4b6b      	ldr	r3, [pc, #428]	; (8000938 <RCC_Disable+0x2bc>)
 800078a:	699b      	ldr	r3, [r3, #24]
 800078c:	79ba      	ldrb	r2, [r7, #6]
 800078e:	2101      	movs	r1, #1
 8000790:	fa01 f202 	lsl.w	r2, r1, r2
 8000794:	43d2      	mvns	r2, r2
 8000796:	4611      	mov	r1, r2
 8000798:	4a67      	ldr	r2, [pc, #412]	; (8000938 <RCC_Disable+0x2bc>)
 800079a:	400b      	ands	r3, r1
 800079c:	6193      	str	r3, [r2, #24]
				break;
 800079e:	e0c4      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_APB1RSTR:
			CLEAR_BIT(RCC->RCC_APB1RSTR,sup_reg_name);
 80007a0:	4b65      	ldr	r3, [pc, #404]	; (8000938 <RCC_Disable+0x2bc>)
 80007a2:	6a1b      	ldr	r3, [r3, #32]
 80007a4:	79ba      	ldrb	r2, [r7, #6]
 80007a6:	2101      	movs	r1, #1
 80007a8:	fa01 f202 	lsl.w	r2, r1, r2
 80007ac:	43d2      	mvns	r2, r2
 80007ae:	4611      	mov	r1, r2
 80007b0:	4a61      	ldr	r2, [pc, #388]	; (8000938 <RCC_Disable+0x2bc>)
 80007b2:	400b      	ands	r3, r1
 80007b4:	6213      	str	r3, [r2, #32]
				break;
 80007b6:	e0b8      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_APB2RSTR:
			CLEAR_BIT(RCC->RCC_APB2RSTR,sup_reg_name);
 80007b8:	4b5f      	ldr	r3, [pc, #380]	; (8000938 <RCC_Disable+0x2bc>)
 80007ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007bc:	79ba      	ldrb	r2, [r7, #6]
 80007be:	2101      	movs	r1, #1
 80007c0:	fa01 f202 	lsl.w	r2, r1, r2
 80007c4:	43d2      	mvns	r2, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a5b      	ldr	r2, [pc, #364]	; (8000938 <RCC_Disable+0x2bc>)
 80007ca:	400b      	ands	r3, r1
 80007cc:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 80007ce:	e0ac      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_AHB1ENR:
			CLEAR_BIT(RCC->RCC_AHB1ENR,sup_reg_name);
 80007d0:	4b59      	ldr	r3, [pc, #356]	; (8000938 <RCC_Disable+0x2bc>)
 80007d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	43d2      	mvns	r2, r2
 80007de:	4611      	mov	r1, r2
 80007e0:	4a55      	ldr	r2, [pc, #340]	; (8000938 <RCC_Disable+0x2bc>)
 80007e2:	400b      	ands	r3, r1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 80007e6:	e0a0      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_AHB2ENR:
			CLEAR_BIT(RCC->RCC_AHB2ENR,sup_reg_name);
 80007e8:	4b53      	ldr	r3, [pc, #332]	; (8000938 <RCC_Disable+0x2bc>)
 80007ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007ec:	79ba      	ldrb	r2, [r7, #6]
 80007ee:	2101      	movs	r1, #1
 80007f0:	fa01 f202 	lsl.w	r2, r1, r2
 80007f4:	43d2      	mvns	r2, r2
 80007f6:	4611      	mov	r1, r2
 80007f8:	4a4f      	ldr	r2, [pc, #316]	; (8000938 <RCC_Disable+0x2bc>)
 80007fa:	400b      	ands	r3, r1
 80007fc:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 80007fe:	e094      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_AHB3ENR:
			CLEAR_BIT(RCC->RCC_AHB3ENR,sup_reg_name);
 8000800:	4b4d      	ldr	r3, [pc, #308]	; (8000938 <RCC_Disable+0x2bc>)
 8000802:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000804:	79ba      	ldrb	r2, [r7, #6]
 8000806:	2101      	movs	r1, #1
 8000808:	fa01 f202 	lsl.w	r2, r1, r2
 800080c:	43d2      	mvns	r2, r2
 800080e:	4611      	mov	r1, r2
 8000810:	4a49      	ldr	r2, [pc, #292]	; (8000938 <RCC_Disable+0x2bc>)
 8000812:	400b      	ands	r3, r1
 8000814:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 8000816:	e088      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_APB1ENR:
			CLEAR_BIT(RCC->RCC_APB1ENR,sup_reg_name);
 8000818:	4b47      	ldr	r3, [pc, #284]	; (8000938 <RCC_Disable+0x2bc>)
 800081a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081c:	79ba      	ldrb	r2, [r7, #6]
 800081e:	2101      	movs	r1, #1
 8000820:	fa01 f202 	lsl.w	r2, r1, r2
 8000824:	43d2      	mvns	r2, r2
 8000826:	4611      	mov	r1, r2
 8000828:	4a43      	ldr	r2, [pc, #268]	; (8000938 <RCC_Disable+0x2bc>)
 800082a:	400b      	ands	r3, r1
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
				break;
 800082e:	e07c      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_APB2ENR:
			CLEAR_BIT(RCC->RCC_APB2ENR,sup_reg_name);
 8000830:	4b41      	ldr	r3, [pc, #260]	; (8000938 <RCC_Disable+0x2bc>)
 8000832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000834:	79ba      	ldrb	r2, [r7, #6]
 8000836:	2101      	movs	r1, #1
 8000838:	fa01 f202 	lsl.w	r2, r1, r2
 800083c:	43d2      	mvns	r2, r2
 800083e:	4611      	mov	r1, r2
 8000840:	4a3d      	ldr	r2, [pc, #244]	; (8000938 <RCC_Disable+0x2bc>)
 8000842:	400b      	ands	r3, r1
 8000844:	6453      	str	r3, [r2, #68]	; 0x44
				break;
 8000846:	e070      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_AHB1LPENR:
			CLEAR_BIT(RCC->RCC_AHB1LPENR,sup_reg_name);
 8000848:	4b3b      	ldr	r3, [pc, #236]	; (8000938 <RCC_Disable+0x2bc>)
 800084a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800084c:	79ba      	ldrb	r2, [r7, #6]
 800084e:	2101      	movs	r1, #1
 8000850:	fa01 f202 	lsl.w	r2, r1, r2
 8000854:	43d2      	mvns	r2, r2
 8000856:	4611      	mov	r1, r2
 8000858:	4a37      	ldr	r2, [pc, #220]	; (8000938 <RCC_Disable+0x2bc>)
 800085a:	400b      	ands	r3, r1
 800085c:	6513      	str	r3, [r2, #80]	; 0x50
				break;
 800085e:	e064      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_AHB2LPENR:
			CLEAR_BIT(RCC->RCC_AHB2LPENR,sup_reg_name);
 8000860:	4b35      	ldr	r3, [pc, #212]	; (8000938 <RCC_Disable+0x2bc>)
 8000862:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000864:	79ba      	ldrb	r2, [r7, #6]
 8000866:	2101      	movs	r1, #1
 8000868:	fa01 f202 	lsl.w	r2, r1, r2
 800086c:	43d2      	mvns	r2, r2
 800086e:	4611      	mov	r1, r2
 8000870:	4a31      	ldr	r2, [pc, #196]	; (8000938 <RCC_Disable+0x2bc>)
 8000872:	400b      	ands	r3, r1
 8000874:	6553      	str	r3, [r2, #84]	; 0x54
				break;
 8000876:	e058      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_AHB3LPENR:
			CLEAR_BIT(RCC->RCC_AHB3LPENR,sup_reg_name);
 8000878:	4b2f      	ldr	r3, [pc, #188]	; (8000938 <RCC_Disable+0x2bc>)
 800087a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800087c:	79ba      	ldrb	r2, [r7, #6]
 800087e:	2101      	movs	r1, #1
 8000880:	fa01 f202 	lsl.w	r2, r1, r2
 8000884:	43d2      	mvns	r2, r2
 8000886:	4611      	mov	r1, r2
 8000888:	4a2b      	ldr	r2, [pc, #172]	; (8000938 <RCC_Disable+0x2bc>)
 800088a:	400b      	ands	r3, r1
 800088c:	6593      	str	r3, [r2, #88]	; 0x58
				break;
 800088e:	e04c      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_APB1LPENR:
			CLEAR_BIT(RCC->RCC_APB1LPENR,sup_reg_name);
 8000890:	4b29      	ldr	r3, [pc, #164]	; (8000938 <RCC_Disable+0x2bc>)
 8000892:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000894:	79ba      	ldrb	r2, [r7, #6]
 8000896:	2101      	movs	r1, #1
 8000898:	fa01 f202 	lsl.w	r2, r1, r2
 800089c:	43d2      	mvns	r2, r2
 800089e:	4611      	mov	r1, r2
 80008a0:	4a25      	ldr	r2, [pc, #148]	; (8000938 <RCC_Disable+0x2bc>)
 80008a2:	400b      	ands	r3, r1
 80008a4:	6613      	str	r3, [r2, #96]	; 0x60
				break;
 80008a6:	e040      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_APB2LPENR:
			CLEAR_BIT(RCC->RCC_APB2LPENR,sup_reg_name);
 80008a8:	4b23      	ldr	r3, [pc, #140]	; (8000938 <RCC_Disable+0x2bc>)
 80008aa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80008ac:	79ba      	ldrb	r2, [r7, #6]
 80008ae:	2101      	movs	r1, #1
 80008b0:	fa01 f202 	lsl.w	r2, r1, r2
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	4611      	mov	r1, r2
 80008b8:	4a1f      	ldr	r2, [pc, #124]	; (8000938 <RCC_Disable+0x2bc>)
 80008ba:	400b      	ands	r3, r1
 80008bc:	6653      	str	r3, [r2, #100]	; 0x64
				break;
 80008be:	e034      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_BDCR:
			CLEAR_BIT(RCC->RCC_BDCR,sup_reg_name);
 80008c0:	4b1d      	ldr	r3, [pc, #116]	; (8000938 <RCC_Disable+0x2bc>)
 80008c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80008c4:	79ba      	ldrb	r2, [r7, #6]
 80008c6:	2101      	movs	r1, #1
 80008c8:	fa01 f202 	lsl.w	r2, r1, r2
 80008cc:	43d2      	mvns	r2, r2
 80008ce:	4611      	mov	r1, r2
 80008d0:	4a19      	ldr	r2, [pc, #100]	; (8000938 <RCC_Disable+0x2bc>)
 80008d2:	400b      	ands	r3, r1
 80008d4:	6713      	str	r3, [r2, #112]	; 0x70
				break;
 80008d6:	e028      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_CSR:
			CLEAR_BIT(RCC->RCC_CSR,sup_reg_name);
 80008d8:	4b17      	ldr	r3, [pc, #92]	; (8000938 <RCC_Disable+0x2bc>)
 80008da:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80008dc:	79ba      	ldrb	r2, [r7, #6]
 80008de:	2101      	movs	r1, #1
 80008e0:	fa01 f202 	lsl.w	r2, r1, r2
 80008e4:	43d2      	mvns	r2, r2
 80008e6:	4611      	mov	r1, r2
 80008e8:	4a13      	ldr	r2, [pc, #76]	; (8000938 <RCC_Disable+0x2bc>)
 80008ea:	400b      	ands	r3, r1
 80008ec:	6753      	str	r3, [r2, #116]	; 0x74
				break;
 80008ee:	e01c      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_SSCGR:
			CLEAR_BIT(RCC->RCC_SSCGR,sup_reg_name);
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <RCC_Disable+0x2bc>)
 80008f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008f6:	79ba      	ldrb	r2, [r7, #6]
 80008f8:	2101      	movs	r1, #1
 80008fa:	fa01 f202 	lsl.w	r2, r1, r2
 80008fe:	43d2      	mvns	r2, r2
 8000900:	4611      	mov	r1, r2
 8000902:	4a0d      	ldr	r2, [pc, #52]	; (8000938 <RCC_Disable+0x2bc>)
 8000904:	400b      	ands	r3, r1
 8000906:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
				break;
 800090a:	e00e      	b.n	800092a <RCC_Disable+0x2ae>
		case RCC_PLLI2SCFGR:
			CLEAR_BIT(RCC->RCC_PLLI2SCFGR,sup_reg_name);
 800090c:	4b0a      	ldr	r3, [pc, #40]	; (8000938 <RCC_Disable+0x2bc>)
 800090e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000912:	79ba      	ldrb	r2, [r7, #6]
 8000914:	2101      	movs	r1, #1
 8000916:	fa01 f202 	lsl.w	r2, r1, r2
 800091a:	43d2      	mvns	r2, r2
 800091c:	4611      	mov	r1, r2
 800091e:	4a06      	ldr	r2, [pc, #24]	; (8000938 <RCC_Disable+0x2bc>)
 8000920:	400b      	ands	r3, r1
 8000922:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
				break;
 8000926:	e000      	b.n	800092a <RCC_Disable+0x2ae>
		default :
			//nothing
			break;
 8000928:	bf00      	nop

		}

}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <rcc_oscillatior_cfg>:


ret_statuse_t rcc_oscillatior_cfg(rcc_oscillatio_cfg *ptr){
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	ret_statuse_t statuse=FUNCTION_NOK;
 8000944:	2300      	movs	r3, #0
 8000946:	73fb      	strb	r3, [r7, #15]
	uint32_t l_prescaller=0;
 8000948:	2300      	movs	r3, #0
 800094a:	60bb      	str	r3, [r7, #8]
		if(NULL!=ptr){
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	2b00      	cmp	r3, #0
 8000950:	f000 8082 	beq.w	8000a58 <rcc_oscillatior_cfg+0x11c>

			switch(ptr->oscillatio_type){
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	2b04      	cmp	r3, #4
 800095a:	d85e      	bhi.n	8000a1a <rcc_oscillatior_cfg+0xde>
 800095c:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <rcc_oscillatior_cfg+0x28>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000979 	.word	0x08000979
 8000968:	08000993 	.word	0x08000993
 800096c:	080009c7 	.word	0x080009c7
 8000970:	080009e3 	.word	0x080009e3
 8000974:	080009ff 	.word	0x080009ff
			case RCC_NONE:
				RCC->RCC_CFGR &=0xFFFFFFFC;
 8000978:	4b3a      	ldr	r3, [pc, #232]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 800097a:	689b      	ldr	r3, [r3, #8]
 800097c:	4a39      	ldr	r2, [pc, #228]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 800097e:	f023 0303 	bic.w	r3, r3, #3
 8000982:	6093      	str	r3, [r2, #8]
				RCC->RCC_CFGR |=RCC_CLOCK_FROM_NOT_ALLOWED;
 8000984:	4b37      	ldr	r3, [pc, #220]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 8000986:	689b      	ldr	r3, [r3, #8]
 8000988:	4a36      	ldr	r2, [pc, #216]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 800098a:	f043 0303 	orr.w	r3, r3, #3
 800098e:	6093      	str	r3, [r2, #8]
				break;
 8000990:	e044      	b.n	8000a1c <rcc_oscillatior_cfg+0xe0>
			case RCC_HSE:
				if(ptr->rcc_hse==RCC_ON){
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	785b      	ldrb	r3, [r3, #1]
 8000996:	2b01      	cmp	r3, #1
 8000998:	d110      	bne.n	80009bc <rcc_oscillatior_cfg+0x80>
					RCC_Enable(RCC_CR,16);
 800099a:	2110      	movs	r1, #16
 800099c:	2000      	movs	r0, #0
 800099e:	f7ff fd25 	bl	80003ec <RCC_Enable>

					RCC->RCC_CFGR &=0xFFFFFFFC;
 80009a2:	4b30      	ldr	r3, [pc, #192]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 80009a4:	689b      	ldr	r3, [r3, #8]
 80009a6:	4a2f      	ldr	r2, [pc, #188]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 80009a8:	f023 0303 	bic.w	r3, r3, #3
 80009ac:	6093      	str	r3, [r2, #8]
					RCC->RCC_CFGR |=RCC_CLOCK_FROM_HSE;
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 80009b0:	689b      	ldr	r3, [r3, #8]
 80009b2:	4a2c      	ldr	r2, [pc, #176]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 80009b4:	f043 0301 	orr.w	r3, r3, #1
 80009b8:	6093      	str	r3, [r2, #8]
				}
				else{
					RCC_Disable(RCC_CR,16);
				}
							break;
 80009ba:	e02f      	b.n	8000a1c <rcc_oscillatior_cfg+0xe0>
					RCC_Disable(RCC_CR,16);
 80009bc:	2110      	movs	r1, #16
 80009be:	2000      	movs	r0, #0
 80009c0:	f7ff fe5c 	bl	800067c <RCC_Disable>
							break;
 80009c4:	e02a      	b.n	8000a1c <rcc_oscillatior_cfg+0xe0>
			case RCC_HSI:
				if(ptr->rcc_hse==RCC_ON){
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	785b      	ldrb	r3, [r3, #1]
 80009ca:	2b01      	cmp	r3, #1
 80009cc:	d104      	bne.n	80009d8 <rcc_oscillatior_cfg+0x9c>
									RCC_Enable(RCC_CR,16);
 80009ce:	2110      	movs	r1, #16
 80009d0:	2000      	movs	r0, #0
 80009d2:	f7ff fd0b 	bl	80003ec <RCC_Enable>
								}
								else{
									RCC_Disable(RCC_CR,16);
								}
							break;
 80009d6:	e021      	b.n	8000a1c <rcc_oscillatior_cfg+0xe0>
									RCC_Disable(RCC_CR,16);
 80009d8:	2110      	movs	r1, #16
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff fe4e 	bl	800067c <RCC_Disable>
							break;
 80009e0:	e01c      	b.n	8000a1c <rcc_oscillatior_cfg+0xe0>
			case RCC_LSE:
				if(ptr->rcc_hse==RCC_ON){
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	785b      	ldrb	r3, [r3, #1]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d104      	bne.n	80009f4 <rcc_oscillatior_cfg+0xb8>
									RCC_Enable(RCC_CR,16);
 80009ea:	2110      	movs	r1, #16
 80009ec:	2000      	movs	r0, #0
 80009ee:	f7ff fcfd 	bl	80003ec <RCC_Enable>
								}
								else{
									RCC_Disable(RCC_CR,16);
								}
							break;
 80009f2:	e013      	b.n	8000a1c <rcc_oscillatior_cfg+0xe0>
									RCC_Disable(RCC_CR,16);
 80009f4:	2110      	movs	r1, #16
 80009f6:	2000      	movs	r0, #0
 80009f8:	f7ff fe40 	bl	800067c <RCC_Disable>
							break;
 80009fc:	e00e      	b.n	8000a1c <rcc_oscillatior_cfg+0xe0>
			case RCC_LSI:
				if(ptr->rcc_hse==RCC_ON){
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	785b      	ldrb	r3, [r3, #1]
 8000a02:	2b01      	cmp	r3, #1
 8000a04:	d104      	bne.n	8000a10 <rcc_oscillatior_cfg+0xd4>
									RCC_Enable(RCC_CR,16);
 8000a06:	2110      	movs	r1, #16
 8000a08:	2000      	movs	r0, #0
 8000a0a:	f7ff fcef 	bl	80003ec <RCC_Enable>
								}
								else{
									RCC_Disable(RCC_CR,16);
								}
										break;
 8000a0e:	e005      	b.n	8000a1c <rcc_oscillatior_cfg+0xe0>
									RCC_Disable(RCC_CR,16);
 8000a10:	2110      	movs	r1, #16
 8000a12:	2000      	movs	r0, #0
 8000a14:	f7ff fe32 	bl	800067c <RCC_Disable>
										break;
 8000a18:	e000      	b.n	8000a1c <rcc_oscillatior_cfg+0xe0>
			default:
				// nothing
				break;
 8000a1a:	bf00      	nop
			}

			RCC->RCC_CFGR&=RCC_CFGR_CLEAR;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	4a10      	ldr	r2, [pc, #64]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 8000a22:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 8000a26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a2a:	6093      	str	r3, [r2, #8]
				l_prescaller|=(uint32_t)((((uint32_t)(ptr->osci_prescaller_cfg.AHP_prescaller))<<4) | (((uint32_t)(ptr->osci_prescaller_cfg.APB1_prescaller))<<10) | (((uint32_t)(ptr->osci_prescaller_cfg.APB2_prescaller))<<13));
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	79db      	ldrb	r3, [r3, #7]
 8000a30:	011a      	lsls	r2, r3, #4
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	799b      	ldrb	r3, [r3, #6]
 8000a36:	029b      	lsls	r3, r3, #10
 8000a38:	431a      	orrs	r2, r3
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	795b      	ldrb	r3, [r3, #5]
 8000a3e:	035b      	lsls	r3, r3, #13
 8000a40:	4313      	orrs	r3, r2
 8000a42:	68ba      	ldr	r2, [r7, #8]
 8000a44:	4313      	orrs	r3, r2
 8000a46:	60bb      	str	r3, [r7, #8]
				RCC->RCC_CFGR|=l_prescaller;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 8000a4a:	689a      	ldr	r2, [r3, #8]
 8000a4c:	4905      	ldr	r1, [pc, #20]	; (8000a64 <rcc_oscillatior_cfg+0x128>)
 8000a4e:	68bb      	ldr	r3, [r7, #8]
 8000a50:	4313      	orrs	r3, r2
 8000a52:	608b      	str	r3, [r1, #8]
		statuse=FUNCTION_OK;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73fb      	strb	r3, [r7, #15]
	}

	return statuse;
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	3710      	adds	r7, #16
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800

08000a68 <int_cfg>:

 volatile uint32_t number_counteing;
 volatile uint32_t number2_counteing;
 volatile uint32_t systick_return_value;

 void int_cfg(void){
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
	 rcc_oscillatio_cfg oscillator_cfg={0};
 8000a6e:	f107 0308 	add.w	r3, r7, #8
 8000a72:	2200      	movs	r2, #0
 8000a74:	601a      	str	r2, [r3, #0]
 8000a76:	605a      	str	r2, [r3, #4]
	 systick_int systickInt={0};
 8000a78:	463b      	mov	r3, r7
 8000a7a:	2200      	movs	r2, #0
 8000a7c:	601a      	str	r2, [r3, #0]
 8000a7e:	605a      	str	r2, [r3, #4]
	 oscillator_cfg.oscillatio_type=RCC_HSE;
 8000a80:	2301      	movs	r3, #1
 8000a82:	723b      	strb	r3, [r7, #8]
	 oscillator_cfg.rcc_hse=RCC_ON;
 8000a84:	2301      	movs	r3, #1
 8000a86:	727b      	strb	r3, [r7, #9]
	 oscillator_cfg.osci_prescaller_cfg.AHP_prescaller=AHP_SYSTEM_CLOCK_NOT_DIVIDED;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	73fb      	strb	r3, [r7, #15]
	 oscillator_cfg.osci_prescaller_cfg.APB1_prescaller=APB1_clock_NOT_DIVIDED;
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	73bb      	strb	r3, [r7, #14]
	 oscillator_cfg.osci_prescaller_cfg.APB2_prescaller=APB2_CLOCK_NOT_DIVIDED;
 8000a90:	2300      	movs	r3, #0
 8000a92:	737b      	strb	r3, [r7, #13]
	 rcc_oscillatior_cfg(&oscillator_cfg);
 8000a94:	f107 0308 	add.w	r3, r7, #8
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f7ff ff4f 	bl	800093c <rcc_oscillatior_cfg>

	 systickInt.systick_clock_sourse=SYSTICK_CLOCK_DIV_1;
 8000a9e:	793b      	ldrb	r3, [r7, #4]
 8000aa0:	f36f 0300 	bfc	r3, #0, #1
 8000aa4:	713b      	strb	r3, [r7, #4]
	 systickInt.systick_interrupt=SYSTICK_INTERRUPT_DISABLE;
 8000aa6:	793b      	ldrb	r3, [r7, #4]
 8000aa8:	f043 0302 	orr.w	r3, r3, #2
 8000aac:	713b      	strb	r3, [r7, #4]
	 systickInt.systick_relaodReg_value=1000;
 8000aae:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000ab2:	603b      	str	r3, [r7, #0]
	 SysTick_Int(&systickInt);
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f7ff fbee 	bl	8000298 <SysTick_Int>
 }
 8000abc:	bf00      	nop
 8000abe:	3710      	adds	r7, #16
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}

08000ac4 <systick>:
void systick(void){
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
	number2_counteing++;
 8000ac8:	4b04      	ldr	r3, [pc, #16]	; (8000adc <systick+0x18>)
 8000aca:	681b      	ldr	r3, [r3, #0]
 8000acc:	3301      	adds	r3, #1
 8000ace:	4a03      	ldr	r2, [pc, #12]	; (8000adc <systick+0x18>)
 8000ad0:	6013      	str	r3, [r2, #0]
}
 8000ad2:	bf00      	nop
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr
 8000adc:	20000028 	.word	0x20000028

08000ae0 <main>:


int main(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
	int_cfg();
 8000ae4:	f7ff ffc0 	bl	8000a68 <int_cfg>

	NVIC_Set_Pending(ADC);
	*/
	//NVIC_Set_Pending(DMA1_STREAM0);
	//NVIC_Set_Pending(ETH);
	RCC_Enable(RCC_AHB1ENR,GPIOA);
 8000ae8:	2100      	movs	r1, #0
 8000aea:	2009      	movs	r0, #9
 8000aec:	f7ff fc7e 	bl	80003ec <RCC_Enable>
	RCC_Enable(RCC_AHB1ENR,GPIOC);
 8000af0:	2102      	movs	r1, #2
 8000af2:	2009      	movs	r0, #9
 8000af4:	f7ff fc7a 	bl	80003ec <RCC_Enable>
	RCC_Enable(RCC_AHB1ENR,GPIOI);
 8000af8:	2108      	movs	r1, #8
 8000afa:	2009      	movs	r0, #9
 8000afc:	f7ff fc76 	bl	80003ec <RCC_Enable>

	RCC_Disable(RCC_AHB1ENR,GPIOC);
 8000b00:	2102      	movs	r1, #2
 8000b02:	2009      	movs	r0, #9
 8000b04:	f7ff fdba 	bl	800067c <RCC_Disable>
	SysTick_PeriodicInterval(systick,1000000);
 8000b08:	4907      	ldr	r1, [pc, #28]	; (8000b28 <main+0x48>)
 8000b0a:	4808      	ldr	r0, [pc, #32]	; (8000b2c <main+0x4c>)
 8000b0c:	f7ff fc08 	bl	8000320 <SysTick_PeriodicInterval>
    /* Loop forever */
	while(1){


		number_counteing++;
 8000b10:	4b07      	ldr	r3, [pc, #28]	; (8000b30 <main+0x50>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	3301      	adds	r3, #1
 8000b16:	4a06      	ldr	r2, [pc, #24]	; (8000b30 <main+0x50>)
 8000b18:	6013      	str	r3, [r2, #0]
		systick_return_value=SysTick_GetRemainingTicks();
 8000b1a:	f7ff fc2b 	bl	8000374 <SysTick_GetRemainingTicks>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	4a04      	ldr	r2, [pc, #16]	; (8000b34 <main+0x54>)
 8000b22:	6013      	str	r3, [r2, #0]
		number_counteing++;
 8000b24:	e7f4      	b.n	8000b10 <main+0x30>
 8000b26:	bf00      	nop
 8000b28:	000f4240 	.word	0x000f4240
 8000b2c:	08000ac5 	.word	0x08000ac5
 8000b30:	20000024 	.word	0x20000024
 8000b34:	2000002c 	.word	0x2000002c

08000b38 <ADC_IRQHandler>:
	}
}

void ADC_IRQHandler(void){
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0

	NVIC_Set_Pending(ETH);
 8000b3c:	203d      	movs	r0, #61	; 0x3d
 8000b3e:	f7ff fb53 	bl	80001e8 <NVIC_Set_Pending>
	NVIC_Set_Pending(DMA1_STREAM0);
 8000b42:	200b      	movs	r0, #11
 8000b44:	f7ff fb50 	bl	80001e8 <NVIC_Set_Pending>

	NVIC_Get_Active(ADC);
 8000b48:	2012      	movs	r0, #18
 8000b4a:	f7ff fb71 	bl	8000230 <NVIC_Get_Active>
	NVIC_Get_Priority(ADC);
 8000b4e:	2012      	movs	r0, #18
 8000b50:	f7ff fb8c 	bl	800026c <NVIC_Get_Priority>
}
 8000b54:	bf00      	nop
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <DMA1_Stream0_IRQHandler>:


void DMA1_Stream0_IRQHandler(void){
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	af00      	add	r7, sp, #0

	NVIC_Set_Pending(ETH);
 8000b5c:	203d      	movs	r0, #61	; 0x3d
 8000b5e:	f7ff fb43 	bl	80001e8 <NVIC_Set_Pending>
	NVIC_Get_Active(DMA1_STREAM0);
 8000b62:	200b      	movs	r0, #11
 8000b64:	f7ff fb64 	bl	8000230 <NVIC_Get_Active>
	NVIC_Get_Priority(DMA1_STREAM0);
 8000b68:	200b      	movs	r0, #11
 8000b6a:	f7ff fb7f 	bl	800026c <NVIC_Get_Priority>
}
 8000b6e:	bf00      	nop
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <ETH_IRQHandler>:


void ETH_IRQHandler(void){
 8000b72:	b580      	push	{r7, lr}
 8000b74:	af00      	add	r7, sp, #0

	NVIC_Get_Active(ETH);
 8000b76:	203d      	movs	r0, #61	; 0x3d
 8000b78:	f7ff fb5a 	bl	8000230 <NVIC_Get_Active>

}
 8000b7c:	bf00      	nop
 8000b7e:	bd80      	pop	{r7, pc}

08000b80 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b80:	480d      	ldr	r0, [pc, #52]	; (8000bb8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b82:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b84:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b88:	480c      	ldr	r0, [pc, #48]	; (8000bbc <LoopForever+0x6>)
  ldr r1, =_edata
 8000b8a:	490d      	ldr	r1, [pc, #52]	; (8000bc0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b8c:	4a0d      	ldr	r2, [pc, #52]	; (8000bc4 <LoopForever+0xe>)
  movs r3, #0
 8000b8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b90:	e002      	b.n	8000b98 <LoopCopyDataInit>

08000b92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b96:	3304      	adds	r3, #4

08000b98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b9c:	d3f9      	bcc.n	8000b92 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b9e:	4a0a      	ldr	r2, [pc, #40]	; (8000bc8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ba0:	4c0a      	ldr	r4, [pc, #40]	; (8000bcc <LoopForever+0x16>)
  movs r3, #0
 8000ba2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ba4:	e001      	b.n	8000baa <LoopFillZerobss>

08000ba6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ba6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ba8:	3204      	adds	r2, #4

08000baa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000baa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bac:	d3fb      	bcc.n	8000ba6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000bae:	f000 f811 	bl	8000bd4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000bb2:	f7ff ff95 	bl	8000ae0 <main>

08000bb6 <LoopForever>:

LoopForever:
  b LoopForever
 8000bb6:	e7fe      	b.n	8000bb6 <LoopForever>
  ldr   r0, =_estack
 8000bb8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000bbc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bc0:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000bc4:	08000c3c 	.word	0x08000c3c
  ldr r2, =_sbss
 8000bc8:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000bcc:	20000030 	.word	0x20000030

08000bd0 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000bd0:	e7fe      	b.n	8000bd0 <BusFault_Handler>
	...

08000bd4 <__libc_init_array>:
 8000bd4:	b570      	push	{r4, r5, r6, lr}
 8000bd6:	4d0d      	ldr	r5, [pc, #52]	; (8000c0c <__libc_init_array+0x38>)
 8000bd8:	4c0d      	ldr	r4, [pc, #52]	; (8000c10 <__libc_init_array+0x3c>)
 8000bda:	1b64      	subs	r4, r4, r5
 8000bdc:	10a4      	asrs	r4, r4, #2
 8000bde:	2600      	movs	r6, #0
 8000be0:	42a6      	cmp	r6, r4
 8000be2:	d109      	bne.n	8000bf8 <__libc_init_array+0x24>
 8000be4:	4d0b      	ldr	r5, [pc, #44]	; (8000c14 <__libc_init_array+0x40>)
 8000be6:	4c0c      	ldr	r4, [pc, #48]	; (8000c18 <__libc_init_array+0x44>)
 8000be8:	f000 f818 	bl	8000c1c <_init>
 8000bec:	1b64      	subs	r4, r4, r5
 8000bee:	10a4      	asrs	r4, r4, #2
 8000bf0:	2600      	movs	r6, #0
 8000bf2:	42a6      	cmp	r6, r4
 8000bf4:	d105      	bne.n	8000c02 <__libc_init_array+0x2e>
 8000bf6:	bd70      	pop	{r4, r5, r6, pc}
 8000bf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bfc:	4798      	blx	r3
 8000bfe:	3601      	adds	r6, #1
 8000c00:	e7ee      	b.n	8000be0 <__libc_init_array+0xc>
 8000c02:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c06:	4798      	blx	r3
 8000c08:	3601      	adds	r6, #1
 8000c0a:	e7f2      	b.n	8000bf2 <__libc_init_array+0x1e>
 8000c0c:	08000c34 	.word	0x08000c34
 8000c10:	08000c34 	.word	0x08000c34
 8000c14:	08000c34 	.word	0x08000c34
 8000c18:	08000c38 	.word	0x08000c38

08000c1c <_init>:
 8000c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c1e:	bf00      	nop
 8000c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c22:	bc08      	pop	{r3}
 8000c24:	469e      	mov	lr, r3
 8000c26:	4770      	bx	lr

08000c28 <_fini>:
 8000c28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c2a:	bf00      	nop
 8000c2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000c2e:	bc08      	pop	{r3}
 8000c30:	469e      	mov	lr, r3
 8000c32:	4770      	bx	lr
