
STM32f407.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001a8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000008ec  080001a8  080001a8  000101a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000a94  08000a9c  00010a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000a94  08000a94  00010a9c  2**0
                  CONTENTS
  4 .ARM          00000000  08000a94  08000a94  00010a9c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000a94  08000a9c  00010a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000a94  08000a94  00010a94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000a98  08000a98  00010a98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010a9c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00010a9c  2**0
                  CONTENTS
 10 .bss          00000024  20000000  20000000  00020000  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020000  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00010a9c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00010acc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000112f  00000000  00000000  00010b0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000003a8  00000000  00000000  00011c3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000000e8  00000000  00000000  00011fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000009d  00000000  00000000  000120d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000108d  00000000  00000000  0001216d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00000984  00000000  00000000  000131fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000489e  00000000  00000000  00013b7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000027c  00000000  00000000  0001841c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000095  00000000  00000000  00018698  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a8 <__do_global_dtors_aux>:
 80001a8:	b510      	push	{r4, lr}
 80001aa:	4c05      	ldr	r4, [pc, #20]	; (80001c0 <__do_global_dtors_aux+0x18>)
 80001ac:	7823      	ldrb	r3, [r4, #0]
 80001ae:	b933      	cbnz	r3, 80001be <__do_global_dtors_aux+0x16>
 80001b0:	4b04      	ldr	r3, [pc, #16]	; (80001c4 <__do_global_dtors_aux+0x1c>)
 80001b2:	b113      	cbz	r3, 80001ba <__do_global_dtors_aux+0x12>
 80001b4:	4804      	ldr	r0, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x20>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	2301      	movs	r3, #1
 80001bc:	7023      	strb	r3, [r4, #0]
 80001be:	bd10      	pop	{r4, pc}
 80001c0:	20000000 	.word	0x20000000
 80001c4:	00000000 	.word	0x00000000
 80001c8:	08000a7c 	.word	0x08000a7c

080001cc <frame_dummy>:
 80001cc:	b508      	push	{r3, lr}
 80001ce:	4b03      	ldr	r3, [pc, #12]	; (80001dc <frame_dummy+0x10>)
 80001d0:	b11b      	cbz	r3, 80001da <frame_dummy+0xe>
 80001d2:	4903      	ldr	r1, [pc, #12]	; (80001e0 <frame_dummy+0x14>)
 80001d4:	4803      	ldr	r0, [pc, #12]	; (80001e4 <frame_dummy+0x18>)
 80001d6:	f3af 8000 	nop.w
 80001da:	bd08      	pop	{r3, pc}
 80001dc:	00000000 	.word	0x00000000
 80001e0:	20000004 	.word	0x20000004
 80001e4:	08000a7c 	.word	0x08000a7c

080001e8 <NVIC_Set_Pending>:
	SET_BIT((NVIC->NVIC_ICER[((uint32_t)irq)>>5UL]),(((uint32_t)irq) & 31UL));

	}
}

void NVIC_Set_Pending(nvic_irq_t irq){
 80001e8:	b480      	push	{r7}
 80001ea:	b083      	sub	sp, #12
 80001ec:	af00      	add	r7, sp, #0
 80001ee:	4603      	mov	r3, r0
 80001f0:	71fb      	strb	r3, [r7, #7]
	if((uint32_t)irq>=0){
	SET_BIT((NVIC->NVIC_ISPR[((uint32_t)irq)>>5UL]),(((uint32_t)irq) & 31UL));
 80001f2:	4a0e      	ldr	r2, [pc, #56]	; (800022c <NVIC_Set_Pending+0x44>)
 80001f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001f8:	095b      	lsrs	r3, r3, #5
 80001fa:	3340      	adds	r3, #64	; 0x40
 80001fc:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000200:	79fb      	ldrb	r3, [r7, #7]
 8000202:	f003 031f 	and.w	r3, r3, #31
 8000206:	2101      	movs	r1, #1
 8000208:	fa01 f303 	lsl.w	r3, r1, r3
 800020c:	4618      	mov	r0, r3
 800020e:	4907      	ldr	r1, [pc, #28]	; (800022c <NVIC_Set_Pending+0x44>)
 8000210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000214:	095b      	lsrs	r3, r3, #5
 8000216:	4302      	orrs	r2, r0
 8000218:	3340      	adds	r3, #64	; 0x40
 800021a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	}
}
 800021e:	bf00      	nop
 8000220:	370c      	adds	r7, #12
 8000222:	46bd      	mov	sp, r7
 8000224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000228:	4770      	bx	lr
 800022a:	bf00      	nop
 800022c:	e000e100 	.word	0xe000e100

08000230 <NVIC_Get_Active>:
	SET_BIT((NVIC->NVIC_ICPR[((uint32_t)irq)>>5UL]),(((uint32_t)irq) & 31UL));

	}
}

uint8_t NVIC_Get_Active(nvic_irq_t irq){
 8000230:	b480      	push	{r7}
 8000232:	b083      	sub	sp, #12
 8000234:	af00      	add	r7, sp, #0
 8000236:	4603      	mov	r3, r0
 8000238:	71fb      	strb	r3, [r7, #7]

	return READ_BIT((NVIC->NVIC_IABR[((uint32_t)irq)>>5UL]),(((uint32_t)irq) & 31UL));;
 800023a:	4a0b      	ldr	r2, [pc, #44]	; (8000268 <NVIC_Get_Active+0x38>)
 800023c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000240:	095b      	lsrs	r3, r3, #5
 8000242:	3380      	adds	r3, #128	; 0x80
 8000244:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000248:	79fb      	ldrb	r3, [r7, #7]
 800024a:	f003 031f 	and.w	r3, r3, #31
 800024e:	fa22 f303 	lsr.w	r3, r2, r3
 8000252:	b2db      	uxtb	r3, r3
 8000254:	f003 0301 	and.w	r3, r3, #1
 8000258:	b2db      	uxtb	r3, r3
}
 800025a:	4618      	mov	r0, r3
 800025c:	370c      	adds	r7, #12
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
 8000266:	bf00      	nop
 8000268:	e000e100 	.word	0xe000e100

0800026c <NVIC_Get_Priority>:

void NVIC_Set_Priority(nvic_irq_t irq,uint8_t priority){
NVIC->NVIC_IPR[irq]=priority<<4;

}
uint8_t NVIC_Get_Priority( nvic_irq_t irq){
 800026c:	b480      	push	{r7}
 800026e:	b083      	sub	sp, #12
 8000270:	af00      	add	r7, sp, #0
 8000272:	4603      	mov	r3, r0
 8000274:	71fb      	strb	r3, [r7, #7]

return (NVIC->NVIC_IPR[irq]>>4);
 8000276:	4a07      	ldr	r2, [pc, #28]	; (8000294 <NVIC_Get_Priority+0x28>)
 8000278:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027c:	4413      	add	r3, r2
 800027e:	f893 3300 	ldrb.w	r3, [r3, #768]	; 0x300
 8000282:	b2db      	uxtb	r3, r3
 8000284:	091b      	lsrs	r3, r3, #4
 8000286:	b2db      	uxtb	r3, r3
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr
 8000294:	e000e100 	.word	0xe000e100

08000298 <RCC_Enable>:

#include <MCAL/RCC/STM32F407_RCC.h>



void RCC_Enable(rcc_register_name_t reg_name,uint8_t sup_reg_name){
 8000298:	b480      	push	{r7}
 800029a:	b083      	sub	sp, #12
 800029c:	af00      	add	r7, sp, #0
 800029e:	4603      	mov	r3, r0
 80002a0:	460a      	mov	r2, r1
 80002a2:	71fb      	strb	r3, [r7, #7]
 80002a4:	4613      	mov	r3, r2
 80002a6:	71bb      	strb	r3, [r7, #6]
	switch(reg_name){
 80002a8:	79fb      	ldrb	r3, [r7, #7]
 80002aa:	2b16      	cmp	r3, #22
 80002ac:	f200 8133 	bhi.w	8000516 <RCC_Enable+0x27e>
 80002b0:	a201      	add	r2, pc, #4	; (adr r2, 80002b8 <RCC_Enable+0x20>)
 80002b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002b6:	bf00      	nop
 80002b8:	08000315 	.word	0x08000315
 80002bc:	0800032b 	.word	0x0800032b
 80002c0:	08000341 	.word	0x08000341
 80002c4:	08000357 	.word	0x08000357
 80002c8:	0800036d 	.word	0x0800036d
 80002cc:	08000383 	.word	0x08000383
 80002d0:	08000399 	.word	0x08000399
 80002d4:	080003af 	.word	0x080003af
 80002d8:	080003c5 	.word	0x080003c5
 80002dc:	080003db 	.word	0x080003db
 80002e0:	080003f1 	.word	0x080003f1
 80002e4:	08000407 	.word	0x08000407
 80002e8:	0800041d 	.word	0x0800041d
 80002ec:	08000433 	.word	0x08000433
 80002f0:	08000449 	.word	0x08000449
 80002f4:	0800045f 	.word	0x0800045f
 80002f8:	08000475 	.word	0x08000475
 80002fc:	0800048b 	.word	0x0800048b
 8000300:	080004a1 	.word	0x080004a1
 8000304:	080004b7 	.word	0x080004b7
 8000308:	080004cd 	.word	0x080004cd
 800030c:	080004e3 	.word	0x080004e3
 8000310:	080004fd 	.word	0x080004fd
	case RCC_CR:
		SET_BIT(RCC->RCC_CR,sup_reg_name);
 8000314:	4b83      	ldr	r3, [pc, #524]	; (8000524 <RCC_Enable+0x28c>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	79ba      	ldrb	r2, [r7, #6]
 800031a:	2101      	movs	r1, #1
 800031c:	fa01 f202 	lsl.w	r2, r1, r2
 8000320:	4611      	mov	r1, r2
 8000322:	4a80      	ldr	r2, [pc, #512]	; (8000524 <RCC_Enable+0x28c>)
 8000324:	430b      	orrs	r3, r1
 8000326:	6013      	str	r3, [r2, #0]
		break;
 8000328:	e0f6      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_PLLCFGR:
		SET_BIT(RCC->RCC_PLLCFGR,sup_reg_name);
 800032a:	4b7e      	ldr	r3, [pc, #504]	; (8000524 <RCC_Enable+0x28c>)
 800032c:	685b      	ldr	r3, [r3, #4]
 800032e:	79ba      	ldrb	r2, [r7, #6]
 8000330:	2101      	movs	r1, #1
 8000332:	fa01 f202 	lsl.w	r2, r1, r2
 8000336:	4611      	mov	r1, r2
 8000338:	4a7a      	ldr	r2, [pc, #488]	; (8000524 <RCC_Enable+0x28c>)
 800033a:	430b      	orrs	r3, r1
 800033c:	6053      	str	r3, [r2, #4]
			break;
 800033e:	e0eb      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_CFGR:
		SET_BIT(RCC->RCC_CFGR,sup_reg_name);
 8000340:	4b78      	ldr	r3, [pc, #480]	; (8000524 <RCC_Enable+0x28c>)
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	79ba      	ldrb	r2, [r7, #6]
 8000346:	2101      	movs	r1, #1
 8000348:	fa01 f202 	lsl.w	r2, r1, r2
 800034c:	4611      	mov	r1, r2
 800034e:	4a75      	ldr	r2, [pc, #468]	; (8000524 <RCC_Enable+0x28c>)
 8000350:	430b      	orrs	r3, r1
 8000352:	6093      	str	r3, [r2, #8]
			break;
 8000354:	e0e0      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_CIR:
		SET_BIT(RCC->RCC_CIR,sup_reg_name);
 8000356:	4b73      	ldr	r3, [pc, #460]	; (8000524 <RCC_Enable+0x28c>)
 8000358:	68db      	ldr	r3, [r3, #12]
 800035a:	79ba      	ldrb	r2, [r7, #6]
 800035c:	2101      	movs	r1, #1
 800035e:	fa01 f202 	lsl.w	r2, r1, r2
 8000362:	4611      	mov	r1, r2
 8000364:	4a6f      	ldr	r2, [pc, #444]	; (8000524 <RCC_Enable+0x28c>)
 8000366:	430b      	orrs	r3, r1
 8000368:	60d3      	str	r3, [r2, #12]
			break;
 800036a:	e0d5      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_AHB1RSTR:
		SET_BIT(RCC->RCC_AHB1RSTR,sup_reg_name);
 800036c:	4b6d      	ldr	r3, [pc, #436]	; (8000524 <RCC_Enable+0x28c>)
 800036e:	691b      	ldr	r3, [r3, #16]
 8000370:	79ba      	ldrb	r2, [r7, #6]
 8000372:	2101      	movs	r1, #1
 8000374:	fa01 f202 	lsl.w	r2, r1, r2
 8000378:	4611      	mov	r1, r2
 800037a:	4a6a      	ldr	r2, [pc, #424]	; (8000524 <RCC_Enable+0x28c>)
 800037c:	430b      	orrs	r3, r1
 800037e:	6113      	str	r3, [r2, #16]
			break;
 8000380:	e0ca      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_AHB2RSTR:
		SET_BIT(RCC->RCC_AHB2RSTR,sup_reg_name);
 8000382:	4b68      	ldr	r3, [pc, #416]	; (8000524 <RCC_Enable+0x28c>)
 8000384:	695b      	ldr	r3, [r3, #20]
 8000386:	79ba      	ldrb	r2, [r7, #6]
 8000388:	2101      	movs	r1, #1
 800038a:	fa01 f202 	lsl.w	r2, r1, r2
 800038e:	4611      	mov	r1, r2
 8000390:	4a64      	ldr	r2, [pc, #400]	; (8000524 <RCC_Enable+0x28c>)
 8000392:	430b      	orrs	r3, r1
 8000394:	6153      	str	r3, [r2, #20]
			break;
 8000396:	e0bf      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_AHB3RSTR:
		SET_BIT(RCC->RCC_AHB3RSTR,sup_reg_name);
 8000398:	4b62      	ldr	r3, [pc, #392]	; (8000524 <RCC_Enable+0x28c>)
 800039a:	699b      	ldr	r3, [r3, #24]
 800039c:	79ba      	ldrb	r2, [r7, #6]
 800039e:	2101      	movs	r1, #1
 80003a0:	fa01 f202 	lsl.w	r2, r1, r2
 80003a4:	4611      	mov	r1, r2
 80003a6:	4a5f      	ldr	r2, [pc, #380]	; (8000524 <RCC_Enable+0x28c>)
 80003a8:	430b      	orrs	r3, r1
 80003aa:	6193      	str	r3, [r2, #24]
			break;
 80003ac:	e0b4      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_APB1RSTR:
		SET_BIT(RCC->RCC_APB1RSTR,sup_reg_name);
 80003ae:	4b5d      	ldr	r3, [pc, #372]	; (8000524 <RCC_Enable+0x28c>)
 80003b0:	6a1b      	ldr	r3, [r3, #32]
 80003b2:	79ba      	ldrb	r2, [r7, #6]
 80003b4:	2101      	movs	r1, #1
 80003b6:	fa01 f202 	lsl.w	r2, r1, r2
 80003ba:	4611      	mov	r1, r2
 80003bc:	4a59      	ldr	r2, [pc, #356]	; (8000524 <RCC_Enable+0x28c>)
 80003be:	430b      	orrs	r3, r1
 80003c0:	6213      	str	r3, [r2, #32]
			break;
 80003c2:	e0a9      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_APB2RSTR:
		SET_BIT(RCC->RCC_APB2RSTR,sup_reg_name);
 80003c4:	4b57      	ldr	r3, [pc, #348]	; (8000524 <RCC_Enable+0x28c>)
 80003c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003c8:	79ba      	ldrb	r2, [r7, #6]
 80003ca:	2101      	movs	r1, #1
 80003cc:	fa01 f202 	lsl.w	r2, r1, r2
 80003d0:	4611      	mov	r1, r2
 80003d2:	4a54      	ldr	r2, [pc, #336]	; (8000524 <RCC_Enable+0x28c>)
 80003d4:	430b      	orrs	r3, r1
 80003d6:	6253      	str	r3, [r2, #36]	; 0x24
			break;
 80003d8:	e09e      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_AHB1ENR:
		SET_BIT(RCC->RCC_AHB1ENR,sup_reg_name);
 80003da:	4b52      	ldr	r3, [pc, #328]	; (8000524 <RCC_Enable+0x28c>)
 80003dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80003de:	79ba      	ldrb	r2, [r7, #6]
 80003e0:	2101      	movs	r1, #1
 80003e2:	fa01 f202 	lsl.w	r2, r1, r2
 80003e6:	4611      	mov	r1, r2
 80003e8:	4a4e      	ldr	r2, [pc, #312]	; (8000524 <RCC_Enable+0x28c>)
 80003ea:	430b      	orrs	r3, r1
 80003ec:	6313      	str	r3, [r2, #48]	; 0x30
			break;
 80003ee:	e093      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_AHB2ENR:
		SET_BIT(RCC->RCC_AHB2ENR,sup_reg_name);
 80003f0:	4b4c      	ldr	r3, [pc, #304]	; (8000524 <RCC_Enable+0x28c>)
 80003f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80003f4:	79ba      	ldrb	r2, [r7, #6]
 80003f6:	2101      	movs	r1, #1
 80003f8:	fa01 f202 	lsl.w	r2, r1, r2
 80003fc:	4611      	mov	r1, r2
 80003fe:	4a49      	ldr	r2, [pc, #292]	; (8000524 <RCC_Enable+0x28c>)
 8000400:	430b      	orrs	r3, r1
 8000402:	6353      	str	r3, [r2, #52]	; 0x34
			break;
 8000404:	e088      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_AHB3ENR:
		SET_BIT(RCC->RCC_AHB3ENR,sup_reg_name);
 8000406:	4b47      	ldr	r3, [pc, #284]	; (8000524 <RCC_Enable+0x28c>)
 8000408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800040a:	79ba      	ldrb	r2, [r7, #6]
 800040c:	2101      	movs	r1, #1
 800040e:	fa01 f202 	lsl.w	r2, r1, r2
 8000412:	4611      	mov	r1, r2
 8000414:	4a43      	ldr	r2, [pc, #268]	; (8000524 <RCC_Enable+0x28c>)
 8000416:	430b      	orrs	r3, r1
 8000418:	6393      	str	r3, [r2, #56]	; 0x38
			break;
 800041a:	e07d      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_APB1ENR:
		SET_BIT(RCC->RCC_APB1ENR,sup_reg_name);
 800041c:	4b41      	ldr	r3, [pc, #260]	; (8000524 <RCC_Enable+0x28c>)
 800041e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000420:	79ba      	ldrb	r2, [r7, #6]
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	4611      	mov	r1, r2
 800042a:	4a3e      	ldr	r2, [pc, #248]	; (8000524 <RCC_Enable+0x28c>)
 800042c:	430b      	orrs	r3, r1
 800042e:	6413      	str	r3, [r2, #64]	; 0x40
			break;
 8000430:	e072      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_APB2ENR:
		SET_BIT(RCC->RCC_APB2ENR,sup_reg_name);
 8000432:	4b3c      	ldr	r3, [pc, #240]	; (8000524 <RCC_Enable+0x28c>)
 8000434:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000436:	79ba      	ldrb	r2, [r7, #6]
 8000438:	2101      	movs	r1, #1
 800043a:	fa01 f202 	lsl.w	r2, r1, r2
 800043e:	4611      	mov	r1, r2
 8000440:	4a38      	ldr	r2, [pc, #224]	; (8000524 <RCC_Enable+0x28c>)
 8000442:	430b      	orrs	r3, r1
 8000444:	6453      	str	r3, [r2, #68]	; 0x44
			break;
 8000446:	e067      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_AHB1LPENR:
		SET_BIT(RCC->RCC_AHB1LPENR,sup_reg_name);
 8000448:	4b36      	ldr	r3, [pc, #216]	; (8000524 <RCC_Enable+0x28c>)
 800044a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800044c:	79ba      	ldrb	r2, [r7, #6]
 800044e:	2101      	movs	r1, #1
 8000450:	fa01 f202 	lsl.w	r2, r1, r2
 8000454:	4611      	mov	r1, r2
 8000456:	4a33      	ldr	r2, [pc, #204]	; (8000524 <RCC_Enable+0x28c>)
 8000458:	430b      	orrs	r3, r1
 800045a:	6513      	str	r3, [r2, #80]	; 0x50
			break;
 800045c:	e05c      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_AHB2LPENR:
		SET_BIT(RCC->RCC_AHB2LPENR,sup_reg_name);
 800045e:	4b31      	ldr	r3, [pc, #196]	; (8000524 <RCC_Enable+0x28c>)
 8000460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000462:	79ba      	ldrb	r2, [r7, #6]
 8000464:	2101      	movs	r1, #1
 8000466:	fa01 f202 	lsl.w	r2, r1, r2
 800046a:	4611      	mov	r1, r2
 800046c:	4a2d      	ldr	r2, [pc, #180]	; (8000524 <RCC_Enable+0x28c>)
 800046e:	430b      	orrs	r3, r1
 8000470:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 8000472:	e051      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_AHB3LPENR:
		SET_BIT(RCC->RCC_AHB3LPENR,sup_reg_name);
 8000474:	4b2b      	ldr	r3, [pc, #172]	; (8000524 <RCC_Enable+0x28c>)
 8000476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000478:	79ba      	ldrb	r2, [r7, #6]
 800047a:	2101      	movs	r1, #1
 800047c:	fa01 f202 	lsl.w	r2, r1, r2
 8000480:	4611      	mov	r1, r2
 8000482:	4a28      	ldr	r2, [pc, #160]	; (8000524 <RCC_Enable+0x28c>)
 8000484:	430b      	orrs	r3, r1
 8000486:	6593      	str	r3, [r2, #88]	; 0x58
			break;
 8000488:	e046      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_APB1LPENR:
		SET_BIT(RCC->RCC_APB1LPENR,sup_reg_name);
 800048a:	4b26      	ldr	r3, [pc, #152]	; (8000524 <RCC_Enable+0x28c>)
 800048c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800048e:	79ba      	ldrb	r2, [r7, #6]
 8000490:	2101      	movs	r1, #1
 8000492:	fa01 f202 	lsl.w	r2, r1, r2
 8000496:	4611      	mov	r1, r2
 8000498:	4a22      	ldr	r2, [pc, #136]	; (8000524 <RCC_Enable+0x28c>)
 800049a:	430b      	orrs	r3, r1
 800049c:	6613      	str	r3, [r2, #96]	; 0x60
			break;
 800049e:	e03b      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_APB2LPENR:
		SET_BIT(RCC->RCC_APB2LPENR,sup_reg_name);
 80004a0:	4b20      	ldr	r3, [pc, #128]	; (8000524 <RCC_Enable+0x28c>)
 80004a2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80004a4:	79ba      	ldrb	r2, [r7, #6]
 80004a6:	2101      	movs	r1, #1
 80004a8:	fa01 f202 	lsl.w	r2, r1, r2
 80004ac:	4611      	mov	r1, r2
 80004ae:	4a1d      	ldr	r2, [pc, #116]	; (8000524 <RCC_Enable+0x28c>)
 80004b0:	430b      	orrs	r3, r1
 80004b2:	6653      	str	r3, [r2, #100]	; 0x64
			break;
 80004b4:	e030      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_BDCR:
		SET_BIT(RCC->RCC_BDCR,sup_reg_name);
 80004b6:	4b1b      	ldr	r3, [pc, #108]	; (8000524 <RCC_Enable+0x28c>)
 80004b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80004ba:	79ba      	ldrb	r2, [r7, #6]
 80004bc:	2101      	movs	r1, #1
 80004be:	fa01 f202 	lsl.w	r2, r1, r2
 80004c2:	4611      	mov	r1, r2
 80004c4:	4a17      	ldr	r2, [pc, #92]	; (8000524 <RCC_Enable+0x28c>)
 80004c6:	430b      	orrs	r3, r1
 80004c8:	6713      	str	r3, [r2, #112]	; 0x70
			break;
 80004ca:	e025      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_CSR:
		SET_BIT(RCC->RCC_CSR,sup_reg_name);
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <RCC_Enable+0x28c>)
 80004ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80004d0:	79ba      	ldrb	r2, [r7, #6]
 80004d2:	2101      	movs	r1, #1
 80004d4:	fa01 f202 	lsl.w	r2, r1, r2
 80004d8:	4611      	mov	r1, r2
 80004da:	4a12      	ldr	r2, [pc, #72]	; (8000524 <RCC_Enable+0x28c>)
 80004dc:	430b      	orrs	r3, r1
 80004de:	6753      	str	r3, [r2, #116]	; 0x74
			break;
 80004e0:	e01a      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_SSCGR:
		SET_BIT(RCC->RCC_SSCGR,sup_reg_name);
 80004e2:	4b10      	ldr	r3, [pc, #64]	; (8000524 <RCC_Enable+0x28c>)
 80004e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80004e8:	79ba      	ldrb	r2, [r7, #6]
 80004ea:	2101      	movs	r1, #1
 80004ec:	fa01 f202 	lsl.w	r2, r1, r2
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a0c      	ldr	r2, [pc, #48]	; (8000524 <RCC_Enable+0x28c>)
 80004f4:	430b      	orrs	r3, r1
 80004f6:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
			break;
 80004fa:	e00d      	b.n	8000518 <RCC_Enable+0x280>
	case RCC_PLLI2SCFGR:
		SET_BIT(RCC->RCC_PLLI2SCFGR,sup_reg_name);
 80004fc:	4b09      	ldr	r3, [pc, #36]	; (8000524 <RCC_Enable+0x28c>)
 80004fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8000502:	79ba      	ldrb	r2, [r7, #6]
 8000504:	2101      	movs	r1, #1
 8000506:	fa01 f202 	lsl.w	r2, r1, r2
 800050a:	4611      	mov	r1, r2
 800050c:	4a05      	ldr	r2, [pc, #20]	; (8000524 <RCC_Enable+0x28c>)
 800050e:	430b      	orrs	r3, r1
 8000510:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
			break;
 8000514:	e000      	b.n	8000518 <RCC_Enable+0x280>
	default :
		//nothing
		break;
 8000516:	bf00      	nop

	}


}
 8000518:	bf00      	nop
 800051a:	370c      	adds	r7, #12
 800051c:	46bd      	mov	sp, r7
 800051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000522:	4770      	bx	lr
 8000524:	40023800 	.word	0x40023800

08000528 <RCC_Disable>:

void RCC_Disable(rcc_register_name_t reg_name,uint8_t sup_reg_name){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	460a      	mov	r2, r1
 8000532:	71fb      	strb	r3, [r7, #7]
 8000534:	4613      	mov	r3, r2
 8000536:	71bb      	strb	r3, [r7, #6]
	switch(reg_name){
 8000538:	79fb      	ldrb	r3, [r7, #7]
 800053a:	2b16      	cmp	r3, #22
 800053c:	f200 814a 	bhi.w	80007d4 <RCC_Disable+0x2ac>
 8000540:	a201      	add	r2, pc, #4	; (adr r2, 8000548 <RCC_Disable+0x20>)
 8000542:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000546:	bf00      	nop
 8000548:	080005a5 	.word	0x080005a5
 800054c:	080005bd 	.word	0x080005bd
 8000550:	080005d5 	.word	0x080005d5
 8000554:	080005ed 	.word	0x080005ed
 8000558:	08000605 	.word	0x08000605
 800055c:	0800061d 	.word	0x0800061d
 8000560:	08000635 	.word	0x08000635
 8000564:	0800064d 	.word	0x0800064d
 8000568:	08000665 	.word	0x08000665
 800056c:	0800067d 	.word	0x0800067d
 8000570:	08000695 	.word	0x08000695
 8000574:	080006ad 	.word	0x080006ad
 8000578:	080006c5 	.word	0x080006c5
 800057c:	080006dd 	.word	0x080006dd
 8000580:	080006f5 	.word	0x080006f5
 8000584:	0800070d 	.word	0x0800070d
 8000588:	08000725 	.word	0x08000725
 800058c:	0800073d 	.word	0x0800073d
 8000590:	08000755 	.word	0x08000755
 8000594:	0800076d 	.word	0x0800076d
 8000598:	08000785 	.word	0x08000785
 800059c:	0800079d 	.word	0x0800079d
 80005a0:	080007b9 	.word	0x080007b9
		case RCC_CR:
			CLEAR_BIT(RCC->RCC_CR,sup_reg_name);
 80005a4:	4b8f      	ldr	r3, [pc, #572]	; (80007e4 <RCC_Disable+0x2bc>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	79ba      	ldrb	r2, [r7, #6]
 80005aa:	2101      	movs	r1, #1
 80005ac:	fa01 f202 	lsl.w	r2, r1, r2
 80005b0:	43d2      	mvns	r2, r2
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a8b      	ldr	r2, [pc, #556]	; (80007e4 <RCC_Disable+0x2bc>)
 80005b6:	400b      	ands	r3, r1
 80005b8:	6013      	str	r3, [r2, #0]
			break;
 80005ba:	e10c      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_PLLCFGR:
			CLEAR_BIT(RCC->RCC_PLLCFGR,sup_reg_name);
 80005bc:	4b89      	ldr	r3, [pc, #548]	; (80007e4 <RCC_Disable+0x2bc>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	79ba      	ldrb	r2, [r7, #6]
 80005c2:	2101      	movs	r1, #1
 80005c4:	fa01 f202 	lsl.w	r2, r1, r2
 80005c8:	43d2      	mvns	r2, r2
 80005ca:	4611      	mov	r1, r2
 80005cc:	4a85      	ldr	r2, [pc, #532]	; (80007e4 <RCC_Disable+0x2bc>)
 80005ce:	400b      	ands	r3, r1
 80005d0:	6053      	str	r3, [r2, #4]
				break;
 80005d2:	e100      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_CFGR:
			CLEAR_BIT(RCC->RCC_CFGR,sup_reg_name);
 80005d4:	4b83      	ldr	r3, [pc, #524]	; (80007e4 <RCC_Disable+0x2bc>)
 80005d6:	689b      	ldr	r3, [r3, #8]
 80005d8:	79ba      	ldrb	r2, [r7, #6]
 80005da:	2101      	movs	r1, #1
 80005dc:	fa01 f202 	lsl.w	r2, r1, r2
 80005e0:	43d2      	mvns	r2, r2
 80005e2:	4611      	mov	r1, r2
 80005e4:	4a7f      	ldr	r2, [pc, #508]	; (80007e4 <RCC_Disable+0x2bc>)
 80005e6:	400b      	ands	r3, r1
 80005e8:	6093      	str	r3, [r2, #8]
				break;
 80005ea:	e0f4      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_CIR:
			CLEAR_BIT(RCC->RCC_CIR,sup_reg_name);
 80005ec:	4b7d      	ldr	r3, [pc, #500]	; (80007e4 <RCC_Disable+0x2bc>)
 80005ee:	68db      	ldr	r3, [r3, #12]
 80005f0:	79ba      	ldrb	r2, [r7, #6]
 80005f2:	2101      	movs	r1, #1
 80005f4:	fa01 f202 	lsl.w	r2, r1, r2
 80005f8:	43d2      	mvns	r2, r2
 80005fa:	4611      	mov	r1, r2
 80005fc:	4a79      	ldr	r2, [pc, #484]	; (80007e4 <RCC_Disable+0x2bc>)
 80005fe:	400b      	ands	r3, r1
 8000600:	60d3      	str	r3, [r2, #12]
				break;
 8000602:	e0e8      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_AHB1RSTR:
			CLEAR_BIT(RCC->RCC_AHB1RSTR,sup_reg_name);
 8000604:	4b77      	ldr	r3, [pc, #476]	; (80007e4 <RCC_Disable+0x2bc>)
 8000606:	691b      	ldr	r3, [r3, #16]
 8000608:	79ba      	ldrb	r2, [r7, #6]
 800060a:	2101      	movs	r1, #1
 800060c:	fa01 f202 	lsl.w	r2, r1, r2
 8000610:	43d2      	mvns	r2, r2
 8000612:	4611      	mov	r1, r2
 8000614:	4a73      	ldr	r2, [pc, #460]	; (80007e4 <RCC_Disable+0x2bc>)
 8000616:	400b      	ands	r3, r1
 8000618:	6113      	str	r3, [r2, #16]
				break;
 800061a:	e0dc      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_AHB2RSTR:
			CLEAR_BIT(RCC->RCC_AHB2RSTR,sup_reg_name);
 800061c:	4b71      	ldr	r3, [pc, #452]	; (80007e4 <RCC_Disable+0x2bc>)
 800061e:	695b      	ldr	r3, [r3, #20]
 8000620:	79ba      	ldrb	r2, [r7, #6]
 8000622:	2101      	movs	r1, #1
 8000624:	fa01 f202 	lsl.w	r2, r1, r2
 8000628:	43d2      	mvns	r2, r2
 800062a:	4611      	mov	r1, r2
 800062c:	4a6d      	ldr	r2, [pc, #436]	; (80007e4 <RCC_Disable+0x2bc>)
 800062e:	400b      	ands	r3, r1
 8000630:	6153      	str	r3, [r2, #20]
				break;
 8000632:	e0d0      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_AHB3RSTR:
			CLEAR_BIT(RCC->RCC_AHB3RSTR,sup_reg_name);
 8000634:	4b6b      	ldr	r3, [pc, #428]	; (80007e4 <RCC_Disable+0x2bc>)
 8000636:	699b      	ldr	r3, [r3, #24]
 8000638:	79ba      	ldrb	r2, [r7, #6]
 800063a:	2101      	movs	r1, #1
 800063c:	fa01 f202 	lsl.w	r2, r1, r2
 8000640:	43d2      	mvns	r2, r2
 8000642:	4611      	mov	r1, r2
 8000644:	4a67      	ldr	r2, [pc, #412]	; (80007e4 <RCC_Disable+0x2bc>)
 8000646:	400b      	ands	r3, r1
 8000648:	6193      	str	r3, [r2, #24]
				break;
 800064a:	e0c4      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_APB1RSTR:
			CLEAR_BIT(RCC->RCC_APB1RSTR,sup_reg_name);
 800064c:	4b65      	ldr	r3, [pc, #404]	; (80007e4 <RCC_Disable+0x2bc>)
 800064e:	6a1b      	ldr	r3, [r3, #32]
 8000650:	79ba      	ldrb	r2, [r7, #6]
 8000652:	2101      	movs	r1, #1
 8000654:	fa01 f202 	lsl.w	r2, r1, r2
 8000658:	43d2      	mvns	r2, r2
 800065a:	4611      	mov	r1, r2
 800065c:	4a61      	ldr	r2, [pc, #388]	; (80007e4 <RCC_Disable+0x2bc>)
 800065e:	400b      	ands	r3, r1
 8000660:	6213      	str	r3, [r2, #32]
				break;
 8000662:	e0b8      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_APB2RSTR:
			CLEAR_BIT(RCC->RCC_APB2RSTR,sup_reg_name);
 8000664:	4b5f      	ldr	r3, [pc, #380]	; (80007e4 <RCC_Disable+0x2bc>)
 8000666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000668:	79ba      	ldrb	r2, [r7, #6]
 800066a:	2101      	movs	r1, #1
 800066c:	fa01 f202 	lsl.w	r2, r1, r2
 8000670:	43d2      	mvns	r2, r2
 8000672:	4611      	mov	r1, r2
 8000674:	4a5b      	ldr	r2, [pc, #364]	; (80007e4 <RCC_Disable+0x2bc>)
 8000676:	400b      	ands	r3, r1
 8000678:	6253      	str	r3, [r2, #36]	; 0x24
				break;
 800067a:	e0ac      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_AHB1ENR:
			CLEAR_BIT(RCC->RCC_AHB1ENR,sup_reg_name);
 800067c:	4b59      	ldr	r3, [pc, #356]	; (80007e4 <RCC_Disable+0x2bc>)
 800067e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000680:	79ba      	ldrb	r2, [r7, #6]
 8000682:	2101      	movs	r1, #1
 8000684:	fa01 f202 	lsl.w	r2, r1, r2
 8000688:	43d2      	mvns	r2, r2
 800068a:	4611      	mov	r1, r2
 800068c:	4a55      	ldr	r2, [pc, #340]	; (80007e4 <RCC_Disable+0x2bc>)
 800068e:	400b      	ands	r3, r1
 8000690:	6313      	str	r3, [r2, #48]	; 0x30
				break;
 8000692:	e0a0      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_AHB2ENR:
			CLEAR_BIT(RCC->RCC_AHB2ENR,sup_reg_name);
 8000694:	4b53      	ldr	r3, [pc, #332]	; (80007e4 <RCC_Disable+0x2bc>)
 8000696:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000698:	79ba      	ldrb	r2, [r7, #6]
 800069a:	2101      	movs	r1, #1
 800069c:	fa01 f202 	lsl.w	r2, r1, r2
 80006a0:	43d2      	mvns	r2, r2
 80006a2:	4611      	mov	r1, r2
 80006a4:	4a4f      	ldr	r2, [pc, #316]	; (80007e4 <RCC_Disable+0x2bc>)
 80006a6:	400b      	ands	r3, r1
 80006a8:	6353      	str	r3, [r2, #52]	; 0x34
				break;
 80006aa:	e094      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_AHB3ENR:
			CLEAR_BIT(RCC->RCC_AHB3ENR,sup_reg_name);
 80006ac:	4b4d      	ldr	r3, [pc, #308]	; (80007e4 <RCC_Disable+0x2bc>)
 80006ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006b0:	79ba      	ldrb	r2, [r7, #6]
 80006b2:	2101      	movs	r1, #1
 80006b4:	fa01 f202 	lsl.w	r2, r1, r2
 80006b8:	43d2      	mvns	r2, r2
 80006ba:	4611      	mov	r1, r2
 80006bc:	4a49      	ldr	r2, [pc, #292]	; (80007e4 <RCC_Disable+0x2bc>)
 80006be:	400b      	ands	r3, r1
 80006c0:	6393      	str	r3, [r2, #56]	; 0x38
				break;
 80006c2:	e088      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_APB1ENR:
			CLEAR_BIT(RCC->RCC_APB1ENR,sup_reg_name);
 80006c4:	4b47      	ldr	r3, [pc, #284]	; (80007e4 <RCC_Disable+0x2bc>)
 80006c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006c8:	79ba      	ldrb	r2, [r7, #6]
 80006ca:	2101      	movs	r1, #1
 80006cc:	fa01 f202 	lsl.w	r2, r1, r2
 80006d0:	43d2      	mvns	r2, r2
 80006d2:	4611      	mov	r1, r2
 80006d4:	4a43      	ldr	r2, [pc, #268]	; (80007e4 <RCC_Disable+0x2bc>)
 80006d6:	400b      	ands	r3, r1
 80006d8:	6413      	str	r3, [r2, #64]	; 0x40
				break;
 80006da:	e07c      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_APB2ENR:
			CLEAR_BIT(RCC->RCC_APB2ENR,sup_reg_name);
 80006dc:	4b41      	ldr	r3, [pc, #260]	; (80007e4 <RCC_Disable+0x2bc>)
 80006de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006e0:	79ba      	ldrb	r2, [r7, #6]
 80006e2:	2101      	movs	r1, #1
 80006e4:	fa01 f202 	lsl.w	r2, r1, r2
 80006e8:	43d2      	mvns	r2, r2
 80006ea:	4611      	mov	r1, r2
 80006ec:	4a3d      	ldr	r2, [pc, #244]	; (80007e4 <RCC_Disable+0x2bc>)
 80006ee:	400b      	ands	r3, r1
 80006f0:	6453      	str	r3, [r2, #68]	; 0x44
				break;
 80006f2:	e070      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_AHB1LPENR:
			CLEAR_BIT(RCC->RCC_AHB1LPENR,sup_reg_name);
 80006f4:	4b3b      	ldr	r3, [pc, #236]	; (80007e4 <RCC_Disable+0x2bc>)
 80006f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80006f8:	79ba      	ldrb	r2, [r7, #6]
 80006fa:	2101      	movs	r1, #1
 80006fc:	fa01 f202 	lsl.w	r2, r1, r2
 8000700:	43d2      	mvns	r2, r2
 8000702:	4611      	mov	r1, r2
 8000704:	4a37      	ldr	r2, [pc, #220]	; (80007e4 <RCC_Disable+0x2bc>)
 8000706:	400b      	ands	r3, r1
 8000708:	6513      	str	r3, [r2, #80]	; 0x50
				break;
 800070a:	e064      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_AHB2LPENR:
			CLEAR_BIT(RCC->RCC_AHB2LPENR,sup_reg_name);
 800070c:	4b35      	ldr	r3, [pc, #212]	; (80007e4 <RCC_Disable+0x2bc>)
 800070e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000710:	79ba      	ldrb	r2, [r7, #6]
 8000712:	2101      	movs	r1, #1
 8000714:	fa01 f202 	lsl.w	r2, r1, r2
 8000718:	43d2      	mvns	r2, r2
 800071a:	4611      	mov	r1, r2
 800071c:	4a31      	ldr	r2, [pc, #196]	; (80007e4 <RCC_Disable+0x2bc>)
 800071e:	400b      	ands	r3, r1
 8000720:	6553      	str	r3, [r2, #84]	; 0x54
				break;
 8000722:	e058      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_AHB3LPENR:
			CLEAR_BIT(RCC->RCC_AHB3LPENR,sup_reg_name);
 8000724:	4b2f      	ldr	r3, [pc, #188]	; (80007e4 <RCC_Disable+0x2bc>)
 8000726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000728:	79ba      	ldrb	r2, [r7, #6]
 800072a:	2101      	movs	r1, #1
 800072c:	fa01 f202 	lsl.w	r2, r1, r2
 8000730:	43d2      	mvns	r2, r2
 8000732:	4611      	mov	r1, r2
 8000734:	4a2b      	ldr	r2, [pc, #172]	; (80007e4 <RCC_Disable+0x2bc>)
 8000736:	400b      	ands	r3, r1
 8000738:	6593      	str	r3, [r2, #88]	; 0x58
				break;
 800073a:	e04c      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_APB1LPENR:
			CLEAR_BIT(RCC->RCC_APB1LPENR,sup_reg_name);
 800073c:	4b29      	ldr	r3, [pc, #164]	; (80007e4 <RCC_Disable+0x2bc>)
 800073e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000740:	79ba      	ldrb	r2, [r7, #6]
 8000742:	2101      	movs	r1, #1
 8000744:	fa01 f202 	lsl.w	r2, r1, r2
 8000748:	43d2      	mvns	r2, r2
 800074a:	4611      	mov	r1, r2
 800074c:	4a25      	ldr	r2, [pc, #148]	; (80007e4 <RCC_Disable+0x2bc>)
 800074e:	400b      	ands	r3, r1
 8000750:	6613      	str	r3, [r2, #96]	; 0x60
				break;
 8000752:	e040      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_APB2LPENR:
			CLEAR_BIT(RCC->RCC_APB2LPENR,sup_reg_name);
 8000754:	4b23      	ldr	r3, [pc, #140]	; (80007e4 <RCC_Disable+0x2bc>)
 8000756:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000758:	79ba      	ldrb	r2, [r7, #6]
 800075a:	2101      	movs	r1, #1
 800075c:	fa01 f202 	lsl.w	r2, r1, r2
 8000760:	43d2      	mvns	r2, r2
 8000762:	4611      	mov	r1, r2
 8000764:	4a1f      	ldr	r2, [pc, #124]	; (80007e4 <RCC_Disable+0x2bc>)
 8000766:	400b      	ands	r3, r1
 8000768:	6653      	str	r3, [r2, #100]	; 0x64
				break;
 800076a:	e034      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_BDCR:
			CLEAR_BIT(RCC->RCC_BDCR,sup_reg_name);
 800076c:	4b1d      	ldr	r3, [pc, #116]	; (80007e4 <RCC_Disable+0x2bc>)
 800076e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000770:	79ba      	ldrb	r2, [r7, #6]
 8000772:	2101      	movs	r1, #1
 8000774:	fa01 f202 	lsl.w	r2, r1, r2
 8000778:	43d2      	mvns	r2, r2
 800077a:	4611      	mov	r1, r2
 800077c:	4a19      	ldr	r2, [pc, #100]	; (80007e4 <RCC_Disable+0x2bc>)
 800077e:	400b      	ands	r3, r1
 8000780:	6713      	str	r3, [r2, #112]	; 0x70
				break;
 8000782:	e028      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_CSR:
			CLEAR_BIT(RCC->RCC_CSR,sup_reg_name);
 8000784:	4b17      	ldr	r3, [pc, #92]	; (80007e4 <RCC_Disable+0x2bc>)
 8000786:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000788:	79ba      	ldrb	r2, [r7, #6]
 800078a:	2101      	movs	r1, #1
 800078c:	fa01 f202 	lsl.w	r2, r1, r2
 8000790:	43d2      	mvns	r2, r2
 8000792:	4611      	mov	r1, r2
 8000794:	4a13      	ldr	r2, [pc, #76]	; (80007e4 <RCC_Disable+0x2bc>)
 8000796:	400b      	ands	r3, r1
 8000798:	6753      	str	r3, [r2, #116]	; 0x74
				break;
 800079a:	e01c      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_SSCGR:
			CLEAR_BIT(RCC->RCC_SSCGR,sup_reg_name);
 800079c:	4b11      	ldr	r3, [pc, #68]	; (80007e4 <RCC_Disable+0x2bc>)
 800079e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80007a2:	79ba      	ldrb	r2, [r7, #6]
 80007a4:	2101      	movs	r1, #1
 80007a6:	fa01 f202 	lsl.w	r2, r1, r2
 80007aa:	43d2      	mvns	r2, r2
 80007ac:	4611      	mov	r1, r2
 80007ae:	4a0d      	ldr	r2, [pc, #52]	; (80007e4 <RCC_Disable+0x2bc>)
 80007b0:	400b      	ands	r3, r1
 80007b2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
				break;
 80007b6:	e00e      	b.n	80007d6 <RCC_Disable+0x2ae>
		case RCC_PLLI2SCFGR:
			CLEAR_BIT(RCC->RCC_PLLI2SCFGR,sup_reg_name);
 80007b8:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <RCC_Disable+0x2bc>)
 80007ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80007be:	79ba      	ldrb	r2, [r7, #6]
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	43d2      	mvns	r2, r2
 80007c8:	4611      	mov	r1, r2
 80007ca:	4a06      	ldr	r2, [pc, #24]	; (80007e4 <RCC_Disable+0x2bc>)
 80007cc:	400b      	ands	r3, r1
 80007ce:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
				break;
 80007d2:	e000      	b.n	80007d6 <RCC_Disable+0x2ae>
		default :
			//nothing
			break;
 80007d4:	bf00      	nop

		}

}
 80007d6:	bf00      	nop
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop
 80007e4:	40023800 	.word	0x40023800

080007e8 <rcc_oscillatior_cfg>:


ret_statuse_t rcc_oscillatior_cfg(rcc_oscillatio_cfg *ptr){
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	ret_statuse_t statuse=FUNCTION_NOK;
 80007f0:	2300      	movs	r3, #0
 80007f2:	73fb      	strb	r3, [r7, #15]
	uint32_t l_prescaller=0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	60bb      	str	r3, [r7, #8]
		if(NULL!=ptr){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d05f      	beq.n	80008be <rcc_oscillatior_cfg+0xd6>

			switch(ptr->oscillatio_type){
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b04      	cmp	r3, #4
 8000804:	d844      	bhi.n	8000890 <rcc_oscillatior_cfg+0xa8>
 8000806:	a201      	add	r2, pc, #4	; (adr r2, 800080c <rcc_oscillatior_cfg+0x24>)
 8000808:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800080c:	08000891 	.word	0x08000891
 8000810:	08000821 	.word	0x08000821
 8000814:	0800083d 	.word	0x0800083d
 8000818:	08000859 	.word	0x08000859
 800081c:	08000875 	.word	0x08000875
			case RCC_NONE:

				break;
			case RCC_HSE:
				if(ptr->rcc_hse==RCC_ON){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	785b      	ldrb	r3, [r3, #1]
 8000824:	2b01      	cmp	r3, #1
 8000826:	d104      	bne.n	8000832 <rcc_oscillatior_cfg+0x4a>
					RCC_Enable(RCC_CR,16);
 8000828:	2110      	movs	r1, #16
 800082a:	2000      	movs	r0, #0
 800082c:	f7ff fd34 	bl	8000298 <RCC_Enable>
				}
				else{
					RCC_Disable(RCC_CR,16);
				}
							break;
 8000830:	e02f      	b.n	8000892 <rcc_oscillatior_cfg+0xaa>
					RCC_Disable(RCC_CR,16);
 8000832:	2110      	movs	r1, #16
 8000834:	2000      	movs	r0, #0
 8000836:	f7ff fe77 	bl	8000528 <RCC_Disable>
							break;
 800083a:	e02a      	b.n	8000892 <rcc_oscillatior_cfg+0xaa>
			case RCC_HSI:
				if(ptr->rcc_hse==RCC_ON){
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	785b      	ldrb	r3, [r3, #1]
 8000840:	2b01      	cmp	r3, #1
 8000842:	d104      	bne.n	800084e <rcc_oscillatior_cfg+0x66>
									RCC_Enable(RCC_CR,16);
 8000844:	2110      	movs	r1, #16
 8000846:	2000      	movs	r0, #0
 8000848:	f7ff fd26 	bl	8000298 <RCC_Enable>
								}
								else{
									RCC_Disable(RCC_CR,16);
								}
							break;
 800084c:	e021      	b.n	8000892 <rcc_oscillatior_cfg+0xaa>
									RCC_Disable(RCC_CR,16);
 800084e:	2110      	movs	r1, #16
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fe69 	bl	8000528 <RCC_Disable>
							break;
 8000856:	e01c      	b.n	8000892 <rcc_oscillatior_cfg+0xaa>
			case RCC_LSE:
				if(ptr->rcc_hse==RCC_ON){
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	785b      	ldrb	r3, [r3, #1]
 800085c:	2b01      	cmp	r3, #1
 800085e:	d104      	bne.n	800086a <rcc_oscillatior_cfg+0x82>
									RCC_Enable(RCC_CR,16);
 8000860:	2110      	movs	r1, #16
 8000862:	2000      	movs	r0, #0
 8000864:	f7ff fd18 	bl	8000298 <RCC_Enable>
								}
								else{
									RCC_Disable(RCC_CR,16);
								}
							break;
 8000868:	e013      	b.n	8000892 <rcc_oscillatior_cfg+0xaa>
									RCC_Disable(RCC_CR,16);
 800086a:	2110      	movs	r1, #16
 800086c:	2000      	movs	r0, #0
 800086e:	f7ff fe5b 	bl	8000528 <RCC_Disable>
							break;
 8000872:	e00e      	b.n	8000892 <rcc_oscillatior_cfg+0xaa>
			case RCC_LSI:
				if(ptr->rcc_hse==RCC_ON){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	785b      	ldrb	r3, [r3, #1]
 8000878:	2b01      	cmp	r3, #1
 800087a:	d104      	bne.n	8000886 <rcc_oscillatior_cfg+0x9e>
									RCC_Enable(RCC_CR,16);
 800087c:	2110      	movs	r1, #16
 800087e:	2000      	movs	r0, #0
 8000880:	f7ff fd0a 	bl	8000298 <RCC_Enable>
								}
								else{
									RCC_Disable(RCC_CR,16);
								}
										break;
 8000884:	e005      	b.n	8000892 <rcc_oscillatior_cfg+0xaa>
									RCC_Disable(RCC_CR,16);
 8000886:	2110      	movs	r1, #16
 8000888:	2000      	movs	r0, #0
 800088a:	f7ff fe4d 	bl	8000528 <RCC_Disable>
										break;
 800088e:	e000      	b.n	8000892 <rcc_oscillatior_cfg+0xaa>
			default:
				// nothing
				break;
 8000890:	bf00      	nop
			}


				l_prescaller|=(uint32_t)((((uint32_t)(ptr->osci_prescaller_cfg.AHP_prescaller))<<4) | (((uint32_t)(ptr->osci_prescaller_cfg.APB1_prescaller))<<10) | (((uint32_t)(ptr->osci_prescaller_cfg.APB2_prescaller))<<13));
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	79db      	ldrb	r3, [r3, #7]
 8000896:	011a      	lsls	r2, r3, #4
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	799b      	ldrb	r3, [r3, #6]
 800089c:	029b      	lsls	r3, r3, #10
 800089e:	431a      	orrs	r2, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	795b      	ldrb	r3, [r3, #5]
 80008a4:	035b      	lsls	r3, r3, #13
 80008a6:	4313      	orrs	r3, r2
 80008a8:	68ba      	ldr	r2, [r7, #8]
 80008aa:	4313      	orrs	r3, r2
 80008ac:	60bb      	str	r3, [r7, #8]
				RCC->RCC_CFGR|=l_prescaller;
 80008ae:	4b06      	ldr	r3, [pc, #24]	; (80008c8 <rcc_oscillatior_cfg+0xe0>)
 80008b0:	689a      	ldr	r2, [r3, #8]
 80008b2:	4905      	ldr	r1, [pc, #20]	; (80008c8 <rcc_oscillatior_cfg+0xe0>)
 80008b4:	68bb      	ldr	r3, [r7, #8]
 80008b6:	4313      	orrs	r3, r2
 80008b8:	608b      	str	r3, [r1, #8]
		statuse=FUNCTION_OK;
 80008ba:	2301      	movs	r3, #1
 80008bc:	73fb      	strb	r3, [r7, #15]
	}

	return statuse;
 80008be:	7bfb      	ldrb	r3, [r7, #15]
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3710      	adds	r7, #16
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800

080008cc <rcc_oscillator_cfg>:
uint8_t var_ETH_check_active;

 uint8_t read_1;
 uint8_t read_2;

 void rcc_oscillator_cfg(void){
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0
	 rcc_oscillatio_cfg oscillator_cfg={0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]
	 oscillator_cfg.oscillatio_type=RCC_HSE;
 80008da:	2301      	movs	r3, #1
 80008dc:	703b      	strb	r3, [r7, #0]
	 oscillator_cfg.rcc_hse=RCC_ON;
 80008de:	2301      	movs	r3, #1
 80008e0:	707b      	strb	r3, [r7, #1]
	 oscillator_cfg.osci_prescaller_cfg.AHP_prescaller=AHP_SYSTEM_CLOCK_DIVIDED_BY_128;
 80008e2:	230d      	movs	r3, #13
 80008e4:	71fb      	strb	r3, [r7, #7]
	 oscillator_cfg.osci_prescaller_cfg.APB1_prescaller=APB1_clock_divided_by_16;
 80008e6:	2307      	movs	r3, #7
 80008e8:	71bb      	strb	r3, [r7, #6]
	 oscillator_cfg.osci_prescaller_cfg.APB2_prescaller=APB2_CLOCK_DIVIDED_BY_2;
 80008ea:	2304      	movs	r3, #4
 80008ec:	717b      	strb	r3, [r7, #5]
	 rcc_oscillatior_cfg(&oscillator_cfg);
 80008ee:	463b      	mov	r3, r7
 80008f0:	4618      	mov	r0, r3
 80008f2:	f7ff ff79 	bl	80007e8 <rcc_oscillatior_cfg>
 }
 80008f6:	bf00      	nop
 80008f8:	3708      	adds	r7, #8
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}

080008fe <main>:

int main(void)
{
 80008fe:	b580      	push	{r7, lr}
 8000900:	af00      	add	r7, sp, #0
	rcc_oscillator_cfg();
 8000902:	f7ff ffe3 	bl	80008cc <rcc_oscillator_cfg>

	NVIC_Set_Pending(ADC);
	*/
	//NVIC_Set_Pending(DMA1_STREAM0);
	//NVIC_Set_Pending(ETH);
	RCC_Enable(RCC_AHB1ENR,GPIOA);
 8000906:	2100      	movs	r1, #0
 8000908:	2009      	movs	r0, #9
 800090a:	f7ff fcc5 	bl	8000298 <RCC_Enable>
	RCC_Enable(RCC_AHB1ENR,GPIOC);
 800090e:	2102      	movs	r1, #2
 8000910:	2009      	movs	r0, #9
 8000912:	f7ff fcc1 	bl	8000298 <RCC_Enable>
	RCC_Enable(RCC_AHB1ENR,GPIOI);
 8000916:	2108      	movs	r1, #8
 8000918:	2009      	movs	r0, #9
 800091a:	f7ff fcbd 	bl	8000298 <RCC_Enable>

	RCC_Disable(RCC_AHB1ENR,GPIOC);
 800091e:	2102      	movs	r1, #2
 8000920:	2009      	movs	r0, #9
 8000922:	f7ff fe01 	bl	8000528 <RCC_Disable>

    /* Loop forever */
	while(1){
 8000926:	e7fe      	b.n	8000926 <main+0x28>

08000928 <ADC_IRQHandler>:

	}
}

void ADC_IRQHandler(void){
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
	var_adc++;
 800092c:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <ADC_IRQHandler+0x3c>)
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	3301      	adds	r3, #1
 8000932:	b2da      	uxtb	r2, r3
 8000934:	4b0b      	ldr	r3, [pc, #44]	; (8000964 <ADC_IRQHandler+0x3c>)
 8000936:	701a      	strb	r2, [r3, #0]
	NVIC_Set_Pending(ETH);
 8000938:	203d      	movs	r0, #61	; 0x3d
 800093a:	f7ff fc55 	bl	80001e8 <NVIC_Set_Pending>
	NVIC_Set_Pending(DMA1_STREAM0);
 800093e:	200b      	movs	r0, #11
 8000940:	f7ff fc52 	bl	80001e8 <NVIC_Set_Pending>

	var_adc_check_active=NVIC_Get_Active(ADC);
 8000944:	2012      	movs	r0, #18
 8000946:	f7ff fc73 	bl	8000230 <NVIC_Get_Active>
 800094a:	4603      	mov	r3, r0
 800094c:	461a      	mov	r2, r3
 800094e:	4b06      	ldr	r3, [pc, #24]	; (8000968 <ADC_IRQHandler+0x40>)
 8000950:	701a      	strb	r2, [r3, #0]
	read_1=NVIC_Get_Priority(ADC);
 8000952:	2012      	movs	r0, #18
 8000954:	f7ff fc8a 	bl	800026c <NVIC_Get_Priority>
 8000958:	4603      	mov	r3, r0
 800095a:	461a      	mov	r2, r3
 800095c:	4b03      	ldr	r3, [pc, #12]	; (800096c <ADC_IRQHandler+0x44>)
 800095e:	701a      	strb	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	bd80      	pop	{r7, pc}
 8000964:	2000001c 	.word	0x2000001c
 8000968:	2000001f 	.word	0x2000001f
 800096c:	20000022 	.word	0x20000022

08000970 <DMA1_Stream0_IRQHandler>:


void DMA1_Stream0_IRQHandler(void){
 8000970:	b580      	push	{r7, lr}
 8000972:	af00      	add	r7, sp, #0
	var_DMA1_Stream0++;
 8000974:	4b0c      	ldr	r3, [pc, #48]	; (80009a8 <DMA1_Stream0_IRQHandler+0x38>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b2da      	uxtb	r2, r3
 800097c:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <DMA1_Stream0_IRQHandler+0x38>)
 800097e:	701a      	strb	r2, [r3, #0]
	NVIC_Set_Pending(ETH);
 8000980:	203d      	movs	r0, #61	; 0x3d
 8000982:	f7ff fc31 	bl	80001e8 <NVIC_Set_Pending>
	var_DMA1_Stream0_check_active=NVIC_Get_Active(DMA1_STREAM0);
 8000986:	200b      	movs	r0, #11
 8000988:	f7ff fc52 	bl	8000230 <NVIC_Get_Active>
 800098c:	4603      	mov	r3, r0
 800098e:	461a      	mov	r2, r3
 8000990:	4b06      	ldr	r3, [pc, #24]	; (80009ac <DMA1_Stream0_IRQHandler+0x3c>)
 8000992:	701a      	strb	r2, [r3, #0]
	read_2=NVIC_Get_Priority(DMA1_STREAM0);
 8000994:	200b      	movs	r0, #11
 8000996:	f7ff fc69 	bl	800026c <NVIC_Get_Priority>
 800099a:	4603      	mov	r3, r0
 800099c:	461a      	mov	r2, r3
 800099e:	4b04      	ldr	r3, [pc, #16]	; (80009b0 <DMA1_Stream0_IRQHandler+0x40>)
 80009a0:	701a      	strb	r2, [r3, #0]
}
 80009a2:	bf00      	nop
 80009a4:	bd80      	pop	{r7, pc}
 80009a6:	bf00      	nop
 80009a8:	2000001d 	.word	0x2000001d
 80009ac:	20000020 	.word	0x20000020
 80009b0:	20000023 	.word	0x20000023

080009b4 <ETH_IRQHandler>:


void ETH_IRQHandler(void){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
	var_ETH++;
 80009b8:	4b07      	ldr	r3, [pc, #28]	; (80009d8 <ETH_IRQHandler+0x24>)
 80009ba:	781b      	ldrb	r3, [r3, #0]
 80009bc:	3301      	adds	r3, #1
 80009be:	b2da      	uxtb	r2, r3
 80009c0:	4b05      	ldr	r3, [pc, #20]	; (80009d8 <ETH_IRQHandler+0x24>)
 80009c2:	701a      	strb	r2, [r3, #0]
	var_ETH_check_active=NVIC_Get_Active(ETH);
 80009c4:	203d      	movs	r0, #61	; 0x3d
 80009c6:	f7ff fc33 	bl	8000230 <NVIC_Get_Active>
 80009ca:	4603      	mov	r3, r0
 80009cc:	461a      	mov	r2, r3
 80009ce:	4b03      	ldr	r3, [pc, #12]	; (80009dc <ETH_IRQHandler+0x28>)
 80009d0:	701a      	strb	r2, [r3, #0]

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	2000001e 	.word	0x2000001e
 80009dc:	20000021 	.word	0x20000021

080009e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80009e0:	480d      	ldr	r0, [pc, #52]	; (8000a18 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80009e2:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80009e4:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009e8:	480c      	ldr	r0, [pc, #48]	; (8000a1c <LoopForever+0x6>)
  ldr r1, =_edata
 80009ea:	490d      	ldr	r1, [pc, #52]	; (8000a20 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009ec:	4a0d      	ldr	r2, [pc, #52]	; (8000a24 <LoopForever+0xe>)
  movs r3, #0
 80009ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f0:	e002      	b.n	80009f8 <LoopCopyDataInit>

080009f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009f6:	3304      	adds	r3, #4

080009f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009fc:	d3f9      	bcc.n	80009f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009fe:	4a0a      	ldr	r2, [pc, #40]	; (8000a28 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a00:	4c0a      	ldr	r4, [pc, #40]	; (8000a2c <LoopForever+0x16>)
  movs r3, #0
 8000a02:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a04:	e001      	b.n	8000a0a <LoopFillZerobss>

08000a06 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a06:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a08:	3204      	adds	r2, #4

08000a0a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a0a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a0c:	d3fb      	bcc.n	8000a06 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a0e:	f000 f811 	bl	8000a34 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a12:	f7ff ff74 	bl	80008fe <main>

08000a16 <LoopForever>:

LoopForever:
  b LoopForever
 8000a16:	e7fe      	b.n	8000a16 <LoopForever>
  ldr   r0, =_estack
 8000a18:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a1c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a20:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000a24:	08000a9c 	.word	0x08000a9c
  ldr r2, =_sbss
 8000a28:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000a2c:	20000024 	.word	0x20000024

08000a30 <BusFault_Handler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a30:	e7fe      	b.n	8000a30 <BusFault_Handler>
	...

08000a34 <__libc_init_array>:
 8000a34:	b570      	push	{r4, r5, r6, lr}
 8000a36:	4d0d      	ldr	r5, [pc, #52]	; (8000a6c <__libc_init_array+0x38>)
 8000a38:	4c0d      	ldr	r4, [pc, #52]	; (8000a70 <__libc_init_array+0x3c>)
 8000a3a:	1b64      	subs	r4, r4, r5
 8000a3c:	10a4      	asrs	r4, r4, #2
 8000a3e:	2600      	movs	r6, #0
 8000a40:	42a6      	cmp	r6, r4
 8000a42:	d109      	bne.n	8000a58 <__libc_init_array+0x24>
 8000a44:	4d0b      	ldr	r5, [pc, #44]	; (8000a74 <__libc_init_array+0x40>)
 8000a46:	4c0c      	ldr	r4, [pc, #48]	; (8000a78 <__libc_init_array+0x44>)
 8000a48:	f000 f818 	bl	8000a7c <_init>
 8000a4c:	1b64      	subs	r4, r4, r5
 8000a4e:	10a4      	asrs	r4, r4, #2
 8000a50:	2600      	movs	r6, #0
 8000a52:	42a6      	cmp	r6, r4
 8000a54:	d105      	bne.n	8000a62 <__libc_init_array+0x2e>
 8000a56:	bd70      	pop	{r4, r5, r6, pc}
 8000a58:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a5c:	4798      	blx	r3
 8000a5e:	3601      	adds	r6, #1
 8000a60:	e7ee      	b.n	8000a40 <__libc_init_array+0xc>
 8000a62:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a66:	4798      	blx	r3
 8000a68:	3601      	adds	r6, #1
 8000a6a:	e7f2      	b.n	8000a52 <__libc_init_array+0x1e>
 8000a6c:	08000a94 	.word	0x08000a94
 8000a70:	08000a94 	.word	0x08000a94
 8000a74:	08000a94 	.word	0x08000a94
 8000a78:	08000a98 	.word	0x08000a98

08000a7c <_init>:
 8000a7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a7e:	bf00      	nop
 8000a80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a82:	bc08      	pop	{r3}
 8000a84:	469e      	mov	lr, r3
 8000a86:	4770      	bx	lr

08000a88 <_fini>:
 8000a88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000a8a:	bf00      	nop
 8000a8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000a8e:	bc08      	pop	{r3}
 8000a90:	469e      	mov	lr, r3
 8000a92:	4770      	bx	lr
